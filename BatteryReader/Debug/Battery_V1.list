
Battery_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007180  08007180  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001bb8  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d38  20001d38  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f60  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000393e  00000000  00000000  0003a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0003da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247a3  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192cc  00000000  00000000  0006444b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf400  00000000  00000000  0007d717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014cb17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a2c  00000000  00000000  0014cb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007108 	.word	0x08007108

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007108 	.word	0x08007108

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004c4:	4b17      	ldr	r3, [pc, #92]	; (8000524 <MX_CAN1_Init+0x64>)
 80004c6:	4a18      	ldr	r2, [pc, #96]	; (8000528 <MX_CAN1_Init+0x68>)
 80004c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <MX_CAN1_Init+0x64>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <MX_CAN1_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <MX_CAN1_Init+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_CAN1_Init+0x64>)
 80004de:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80004e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_CAN1_Init+0x64>)
 80004e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004ec:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <MX_CAN1_Init+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_CAN1_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <MX_CAN1_Init+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_CAN1_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <MX_CAN1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_CAN1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_CAN1_Init+0x64>)
 8000512:	f000 fb7f 	bl	8000c14 <HAL_CAN_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800051c:	f000 f9ca 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200003ec 	.word	0x200003ec
 8000528:	40006400 	.word	0x40006400

0800052c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <MX_CAN2_Init+0x64>)
 8000532:	4a18      	ldr	r2, [pc, #96]	; (8000594 <MX_CAN2_Init+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_CAN2_Init+0x64>)
 8000538:	2203      	movs	r2, #3
 800053a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_CAN2_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_CAN2_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_CAN2_Init+0x64>)
 800054a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800054e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_CAN2_Init+0x64>)
 8000552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000556:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <MX_CAN2_Init+0x64>)
 800055a:	2200      	movs	r2, #0
 800055c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_CAN2_Init+0x64>)
 8000560:	2200      	movs	r2, #0
 8000562:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <MX_CAN2_Init+0x64>)
 8000566:	2200      	movs	r2, #0
 8000568:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_CAN2_Init+0x64>)
 800056c:	2200      	movs	r2, #0
 800056e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <MX_CAN2_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_CAN2_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_CAN2_Init+0x64>)
 800057e:	f000 fb49 	bl	8000c14 <HAL_CAN_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000588:	f000 f994 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200003c4 	.word	0x200003c4
 8000594:	40006800 	.word	0x40006800

08000598 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a42      	ldr	r2, [pc, #264]	; (80006c0 <HAL_CAN_MspInit+0x128>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d135      	bne.n	8000626 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <HAL_CAN_MspInit+0x12c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a40      	ldr	r2, [pc, #256]	; (80006c4 <HAL_CAN_MspInit+0x12c>)
 80005c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80005c4:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <HAL_CAN_MspInit+0x12c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10d      	bne.n	80005e8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	4b3d      	ldr	r3, [pc, #244]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a3c      	ldr	r2, [pc, #240]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 80005d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a35      	ldr	r2, [pc, #212]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000604:	2303      	movs	r3, #3
 8000606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000614:	2309      	movs	r3, #9
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	482b      	ldr	r0, [pc, #172]	; (80006cc <HAL_CAN_MspInit+0x134>)
 8000620:	f000 fd06 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000624:	e048      	b.n	80006b8 <HAL_CAN_MspInit+0x120>
  else if(canHandle->Instance==CAN2)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <HAL_CAN_MspInit+0x138>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d143      	bne.n	80006b8 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a23      	ldr	r2, [pc, #140]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 800063a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <HAL_CAN_MspInit+0x12c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <HAL_CAN_MspInit+0x12c>)
 8000654:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_CAN_MspInit+0x12c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10d      	bne.n	800067a <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_CAN_MspInit+0x130>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000696:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80006a8:	2309      	movs	r3, #9
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <HAL_CAN_MspInit+0x13c>)
 80006b4:	f000 fcbc 	bl	8001030 <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3730      	adds	r7, #48	; 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40006400 	.word	0x40006400
 80006c4:	2000019c 	.word	0x2000019c
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40006800 	.word	0x40006800
 80006d4:	40020400 	.word	0x40020400

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <MX_GPIO_Init+0xdc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <MX_GPIO_Init+0xdc>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_GPIO_Init+0xdc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_GPIO_Init+0xdc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <MX_GPIO_Init+0xdc>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_GPIO_Init+0xdc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_GPIO_Init+0xe0>)
 8000780:	f000 fdf2 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_GPIO_Init+0xe0>)
 800078a:	f000 fded 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800078e:	23c0      	movs	r3, #192	; 0xc0
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0xe0>)
 80007a6:	f000 fc43 	bl	8001030 <HAL_GPIO_Init>

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 f992 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f80c 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f7ff ff86 	bl	80006d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007cc:	f7ff fe78 	bl	80004c0 <MX_CAN1_Init>
  MX_CAN2_Init();
 80007d0:	f7ff feac 	bl	800052c <MX_CAN2_Init>
  MX_TIM2_Init();
 80007d4:	f000 f8ec 	bl	80009b0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80007d8:	f005 ff76 	bl	80066c8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x20>
	...

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 fc82 	bl	80070f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <SystemClock_Config+0xcc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <SystemClock_Config+0xd0>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <SystemClock_Config+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000850:	2319      	movs	r3, #25
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000854:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800085e:	2307      	movs	r3, #7
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4618      	mov	r0, r3
 8000868:	f001 ff1a 	bl	80026a0 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000872:	f000 f81f 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2105      	movs	r1, #5
 8000894:	4618      	mov	r0, r3
 8000896:	f002 f97b 	bl	8002b90 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a0:	f000 f808 	bl	80008b4 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095c:	f000 f916 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM2_IRQHandler+0x10>)
 800096a:	f002 fb08 	bl	8002f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000414 	.word	0x20000414

08000978 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <OTG_FS_IRQHandler+0x10>)
 800097e:	f000 fe5c 	bl	800163a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20001930 	.word	0x20001930

0800098c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <SystemInit+0x20>)
 8000992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <SystemInit+0x20>)
 8000998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800099c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <MX_TIM2_Init+0x94>)
 80009f6:	f002 fa73 	bl	8002ee0 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a00:	f7ff ff58 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_TIM2_Init+0x94>)
 8000a12:	f002 fbbc 	bl	800318e <HAL_TIM_ConfigClockSource>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a1c:	f7ff ff4a 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM2_Init+0x94>)
 8000a2e:	f002 fde1 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f7ff ff3c 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000414 	.word	0x20000414

08000a48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a58:	d115      	bne.n	8000a86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_TIM_Base_MspInit+0x48>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_TIM_Base_MspInit+0x48>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x48>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	201c      	movs	r0, #28
 8000a7c:	f000 faa1 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a80:	201c      	movs	r0, #28
 8000a82:	f000 faba 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ff65 	bl	800098c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f006 faf5 	bl	80070b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fe79 	bl	80007bc <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000ad8:	08007188 	.word	0x08007188
  ldr r2, =_sbss
 8000adc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ae0:	20001d38 	.word	0x20001d38

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 fa4b 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fed0 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fa63 	bl	8001016 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 fa2b 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	2000045c 	.word	0x2000045c

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000045c 	.word	0x2000045c

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0ed      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fcb0 	bl	8000598 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c48:	f7ff ffb4 	bl	8000bb4 <HAL_GetTick>
 8000c4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c4e:	e012      	b.n	8000c76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c50:	f7ff ffb0 	bl	8000bb4 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d90b      	bls.n	8000c76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e0c5      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0e5      	beq.n	8000c50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0202 	bic.w	r2, r2, #2
 8000c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c94:	f7ff ff8e 	bl	8000bb4 <HAL_GetTick>
 8000c98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c9a:	e012      	b.n	8000cc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c9c:	f7ff ff8a 	bl	8000bb4 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d90b      	bls.n	8000cc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2205      	movs	r2, #5
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e09f      	b.n	8000e02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1e5      	bne.n	8000c9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7e1b      	ldrb	r3, [r3, #24]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7e5b      	ldrb	r3, [r3, #25]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	7e9b      	ldrb	r3, [r3, #26]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d108      	bne.n	8000d3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0220 	orr.w	r2, r2, #32
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0220 	bic.w	r2, r2, #32
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7edb      	ldrb	r3, [r3, #27]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d108      	bne.n	8000d68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0210 	bic.w	r2, r2, #16
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e007      	b.n	8000d78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0210 	orr.w	r2, r2, #16
 8000d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7f1b      	ldrb	r3, [r3, #28]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d108      	bne.n	8000d92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0208 	orr.w	r2, r2, #8
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0208 	bic.w	r2, r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7f5b      	ldrb	r3, [r3, #29]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d108      	bne.n	8000dbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f042 0204 	orr.w	r2, r2, #4
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e007      	b.n	8000dcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 0204 	bic.w	r2, r2, #4
 8000dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	ea42 0103 	orr.w	r1, r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	; (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	; 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e16b      	b.n	8001324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 815a 	bne.w	800131e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80b4 	beq.w	800131e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b60      	ldr	r3, [pc, #384]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a5f      	ldr	r2, [pc, #380]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a5b      	ldr	r2, [pc, #364]	; (8001340 <HAL_GPIO_Init+0x310>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a52      	ldr	r2, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d02b      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a51      	ldr	r2, [pc, #324]	; (8001348 <HAL_GPIO_Init+0x318>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d025      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_GPIO_Init+0x31c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d01f      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x320>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d019      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x324>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d013      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x328>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d00d      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x32c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d007      	beq.n	800123e <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x330>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d101      	bne.n	800123a <HAL_GPIO_Init+0x20a>
 8001236:	2307      	movs	r3, #7
 8001238:	e00e      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123a:	2308      	movs	r3, #8
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800123e:	2306      	movs	r3, #6
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x228>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x228>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x310>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <HAL_GPIO_Init+0x334>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129a:	4a32      	ldr	r2, [pc, #200]	; (8001364 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <HAL_GPIO_Init+0x334>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_GPIO_Init+0x334>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae90 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40021c00 	.word	0x40021c00
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800139a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139c:	b08f      	sub	sp, #60	; 0x3c
 800139e:	af0a      	add	r7, sp, #40	; 0x28
 80013a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e10f      	b.n	80015cc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f005 fb5e 	bl	8006a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 faa7 	bl	800393e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	687e      	ldr	r6, [r7, #4]
 80013f8:	466d      	mov	r5, sp
 80013fa:	f106 0410 	add.w	r4, r6, #16
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140a:	e885 0003 	stmia.w	r5, {r0, r1}
 800140e:	1d33      	adds	r3, r6, #4
 8001410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001412:	6838      	ldr	r0, [r7, #0]
 8001414:	f002 f97e 	bl	8003714 <USB_CoreInit>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0d0      	b.n	80015cc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fa95 	bl	8003960 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e04a      	b.n	80014d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	333d      	adds	r3, #61	; 0x3d
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001450:	7bfa      	ldrb	r2, [r7, #15]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	333c      	adds	r3, #60	; 0x3c
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	b298      	uxth	r0, r3
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3342      	adds	r3, #66	; 0x42
 8001478:	4602      	mov	r2, r0
 800147a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	333f      	adds	r3, #63	; 0x3f
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3344      	adds	r3, #68	; 0x44
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4613      	mov	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	1a9b      	subs	r3, r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3348      	adds	r3, #72	; 0x48
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	3350      	adds	r3, #80	; 0x50
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3af      	bcc.n	800143c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e044      	b.n	800156c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	1a9b      	subs	r3, r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	3301      	adds	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3b5      	bcc.n	80014e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	687e      	ldr	r6, [r7, #4]
 800157e:	466d      	mov	r5, sp
 8001580:	f106 0410 	add.w	r4, r6, #16
 8001584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800158a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001590:	e885 0003 	stmia.w	r5, {r0, r1}
 8001594:	1d33      	adds	r3, r6, #4
 8001596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f002 fa2d 	bl	80039f8 <USB_DevInit>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e00d      	b.n	80015cc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 faa9 	bl	8004b1c <USB_DevDisconnect>

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_PCD_Start+0x1c>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e020      	b.n	8001632 <HAL_PCD_Start+0x5e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d109      	bne.n	8001614 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001604:	2b01      	cmp	r3, #1
 8001606:	d005      	beq.n	8001614 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f002 f97f 	bl	800391c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fa59 	bl	8004ada <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800163a:	b590      	push	{r4, r7, lr}
 800163c:	b08d      	sub	sp, #52	; 0x34
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fb17 	bl	8004c84 <USB_GetMode>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 839d 	bne.w	8001d98 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fa7b 	bl	8004b5e <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8393 	beq.w	8001d96 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 fa72 	bl	8004b5e <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b02      	cmp	r3, #2
 8001682:	d107      	bne.n	8001694 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f002 0202 	and.w	r2, r2, #2
 8001692:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 fa60 	bl	8004b5e <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d161      	bne.n	800176c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0210 	bic.w	r2, r2, #16
 80016b6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f003 020f 	and.w	r2, r3, #15
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	3304      	adds	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	0c5b      	lsrs	r3, r3, #17
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d124      	bne.n	800172e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d035      	beq.n	800175c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	6a38      	ldr	r0, [r7, #32]
 8001704:	f003 f897 	bl	8004836 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	091b      	lsrs	r3, r3, #4
 8001710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001714:	441a      	add	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001726:	441a      	add	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	619a      	str	r2, [r3, #24]
 800172c:	e016      	b.n	800175c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	0c5b      	lsrs	r3, r3, #17
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	2b06      	cmp	r3, #6
 8001738:	d110      	bne.n	800175c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001740:	2208      	movs	r2, #8
 8001742:	4619      	mov	r1, r3
 8001744:	6a38      	ldr	r0, [r7, #32]
 8001746:	f003 f876 	bl	8004836 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001756:	441a      	add	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0210 	orr.w	r2, r2, #16
 800176a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f9f4 	bl	8004b5e <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800177c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001780:	d16e      	bne.n	8001860 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f9fa 	bl	8004b84 <USB_ReadDevAllOutEpInterrupt>
 8001790:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001792:	e062      	b.n	800185a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d057      	beq.n	800184e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 fa1f 	bl	8004bec <USB_ReadDevOutEPInterrupt>
 80017ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00c      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017c6:	461a      	mov	r2, r3
 80017c8:	2301      	movs	r3, #1
 80017ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fdb0 	bl	8002334 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ea:	461a      	mov	r2, r3
 80017ec:	2308      	movs	r3, #8
 80017ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 feaa 	bl	800254c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180e:	461a      	mov	r2, r3
 8001810:	2310      	movs	r3, #16
 8001812:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	461a      	mov	r2, r3
 800182c:	2320      	movs	r3, #32
 800182e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001846:	461a      	mov	r2, r3
 8001848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800184c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	085b      	lsrs	r3, r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d199      	bne.n	8001794 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f003 f97a 	bl	8004b5e <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001874:	f040 80c0 	bne.w	80019f8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 f99b 	bl	8004bb8 <USB_ReadDevAllInEpInterrupt>
 8001882:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001888:	e0b2      	b.n	80019f0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a7 	beq.w	80019e4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 f9c1 	bl	8004c28 <USB_ReadDevInEPInterrupt>
 80018a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d057      	beq.n	8001962 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	2201      	movs	r2, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69f9      	ldr	r1, [r7, #28]
 80018ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018d2:	4013      	ands	r3, r2
 80018d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e2:	461a      	mov	r2, r3
 80018e4:	2301      	movs	r3, #1
 80018e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d132      	bne.n	8001956 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	3348      	adds	r3, #72	; 0x48
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4403      	add	r3, r0
 8001910:	3344      	adds	r3, #68	; 0x44
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4419      	add	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4403      	add	r3, r0
 8001924:	3348      	adds	r3, #72	; 0x48
 8001926:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	2b00      	cmp	r3, #0
 800192c:	d113      	bne.n	8001956 <HAL_PCD_IRQHandler+0x31c>
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3350      	adds	r3, #80	; 0x50
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d108      	bne.n	8001956 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800194e:	461a      	mov	r2, r3
 8001950:	2101      	movs	r1, #1
 8001952:	f003 f9c9 	bl	8004ce8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f005 f914 	bl	8006b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001978:	461a      	mov	r2, r3
 800197a:	2308      	movs	r3, #8
 800197c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001994:	461a      	mov	r2, r3
 8001996:	2310      	movs	r3, #16
 8001998:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	015a      	lsls	r2, r3, #5
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b0:	461a      	mov	r2, r3
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019cc:	461a      	mov	r2, r3
 80019ce:	2302      	movs	r3, #2
 80019d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fc1b 	bl	800221a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3301      	adds	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f47f af49 	bne.w	800188a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 f8ae 	bl	8004b5e <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a0c:	d122      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a34:	2100      	movs	r1, #0
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fe26 	bl	8002688 <HAL_PCDEx_LPM_Callback>
 8001a3c:	e002      	b.n	8001a44 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f005 f91a 	bl	8006c78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f880 	bl	8004b5e <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a68:	d112      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f005 f8d6 	bl	8006c2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a8e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 f862 	bl	8004b5e <USB_ReadInterrupts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa4:	f040 80c7 	bne.w	8001c36 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 f8fc 	bl	8003cc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001acc:	e056      	b.n	8001b7c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ada:	461a      	mov	r2, r3
 8001adc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ae0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af2:	0151      	lsls	r1, r2, #5
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	440a      	add	r2, r1
 8001af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001afc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b00:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b12:	0151      	lsls	r1, r2, #5
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	440a      	add	r2, r1
 8001b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b38:	015a      	lsls	r2, r3, #5
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	0151      	lsls	r1, r2, #5
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	440a      	add	r2, r1
 8001b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b66:	0151      	lsls	r1, r2, #5
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	440a      	add	r2, r1
 8001b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	3301      	adds	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d3a3      	bcc.n	8001ace <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f043 030b 	orr.w	r3, r3, #11
 8001bb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bc8:	f043 030b 	orr.w	r3, r3, #11
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	e015      	b.n	8001bfc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001be2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001be6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf6:	f043 030b 	orr.w	r3, r3, #11
 8001bfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c20:	461a      	mov	r2, r3
 8001c22:	f003 f861 	bl	8004ce8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 ff8f 	bl	8004b5e <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4a:	d124      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 f825 	bl	8004ca0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 f88d 	bl	8003d7a <USB_GetDevSpeed>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681c      	ldr	r4, [r3, #0]
 8001c6c:	f001 f92c 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8001c70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f001 fdac 	bl	80037d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f004 ffaa 	bl	8006bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 ff5f 	bl	8004b5e <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f004 ff87 	bl	8006bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f002 0208 	and.w	r2, r2, #8
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 ff4a 	bl	8004b5e <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cd4:	d10f      	bne.n	8001cf6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f004 ffe9 	bl	8006cb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 ff2f 	bl	8004b5e <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d0a:	d10f      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f004 ffbc 	bl	8006c94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 ff14 	bl	8004b5e <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d10a      	bne.n	8001d58 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f004 ffca 	bl	8006cdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 fefe 	bl	8004b5e <USB_ReadInterrupts>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d115      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f004 ffba 	bl	8006cf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	e000      	b.n	8001d98 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d96:	bf00      	nop
    }
  }
}
 8001d98:	3734      	adds	r7, #52	; 0x34
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}

08001d9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_SetAddress+0x1a>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e013      	b.n	8001de0 <HAL_PCD_SetAddress+0x42>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 fe5c 	bl	8004a8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	70fb      	strb	r3, [r7, #3]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	803b      	strh	r3, [r7, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da0f      	bge.n	8001e2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	705a      	strb	r2, [r3, #1]
 8001e2c:	e00f      	b.n	8001e4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	3304      	adds	r3, #4
 8001e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e5a:	883a      	ldrh	r2, [r7, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	78ba      	ldrb	r2, [r7, #2]
 8001e64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e78:	78bb      	ldrb	r3, [r7, #2]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d102      	bne.n	8001e84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_EP_Open+0xaa>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e00e      	b.n	8001eb0 <HAL_PCD_EP_Open+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f001 ff8f 	bl	8003dc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001eae:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da0f      	bge.n	8001eec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 020f 	and.w	r2, r3, #15
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	3338      	adds	r3, #56	; 0x38
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	705a      	strb	r2, [r3, #1]
 8001eea:	e00f      	b.n	8001f0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_EP_Close+0x6e>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e00e      	b.n	8001f44 <HAL_PCD_EP_Close+0x8c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 ffcd 	bl	8003ed4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
 8001f5e:	f003 020f 	and.w	r2, r3, #15
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6979      	ldr	r1, [r7, #20]
 8001fc0:	f002 faa8 	bl	8004514 <USB_EP0StartXfer>
 8001fc4:	e008      	b.n	8001fd8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6979      	ldr	r1, [r7, #20]
 8001fd4:	f002 f85a 	bl	800408c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002004:	681b      	ldr	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	460b      	mov	r3, r1
 8002020:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	3338      	adds	r3, #56	; 0x38
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2201      	movs	r2, #1
 8002050:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	b2da      	uxtb	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d102      	bne.n	800206c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800206c:	7afb      	ldrb	r3, [r7, #11]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	6979      	ldr	r1, [r7, #20]
 8002084:	f002 fa46 	bl	8004514 <USB_EP0StartXfer>
 8002088:	e008      	b.n	800209c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6979      	ldr	r1, [r7, #20]
 8002098:	f001 fff8 	bl	800408c <USB_EPStartXfer>
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 020f 	and.w	r2, r3, #15
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d901      	bls.n	80020c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e050      	b.n	8002166 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da0f      	bge.n	80020ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3338      	adds	r3, #56	; 0x38
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	705a      	strb	r2, [r3, #1]
 80020ea:	e00d      	b.n	8002108 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_PCD_EP_SetStall+0x82>
 8002124:	2302      	movs	r3, #2
 8002126:	e01e      	b.n	8002166 <HAL_PCD_EP_SetStall+0xc0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68f9      	ldr	r1, [r7, #12]
 8002136:	4618      	mov	r0, r3
 8002138:	f002 fbd5 	bl	80048e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	b2d9      	uxtb	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002156:	461a      	mov	r2, r3
 8002158:	f002 fdc6 	bl	8004ce8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d901      	bls.n	800218c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e042      	b.n	8002212 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800218c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0f      	bge.n	80021b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	f003 020f 	and.w	r2, r3, #15
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	3338      	adds	r3, #56	; 0x38
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	705a      	strb	r2, [r3, #1]
 80021b2:	e00f      	b.n	80021d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_PCD_EP_ClrStall+0x86>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e00e      	b.n	8002212 <HAL_PCD_EP_ClrStall+0xa4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fbdd 	bl	80049c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b08a      	sub	sp, #40	; 0x28
 800221e:	af02      	add	r7, sp, #8
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	3338      	adds	r3, #56	; 0x38
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	3304      	adds	r3, #4
 8002240:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	429a      	cmp	r2, r3
 800224c:	d901      	bls.n	8002252 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06c      	b.n	800232c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	d902      	bls.n	800226e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3303      	adds	r3, #3
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002276:	e02b      	b.n	80022d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	429a      	cmp	r2, r3
 800228c:	d902      	bls.n	8002294 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3303      	adds	r3, #3
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68d9      	ldr	r1, [r3, #12]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	4603      	mov	r3, r0
 80022b2:	6978      	ldr	r0, [r7, #20]
 80022b4:	f002 fa81 	bl	80047ba <USB_WritePacket>

    ep->xfer_buff  += len;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	441a      	add	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d809      	bhi.n	80022fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d203      	bcs.n	80022fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1be      	bne.n	8002278 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	429a      	cmp	r2, r3
 8002304:	d811      	bhi.n	800232a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	2201      	movs	r2, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800231a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	43db      	mvns	r3, r3
 8002320:	6939      	ldr	r1, [r7, #16]
 8002322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002326:	4013      	ands	r3, r2
 8002328:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	333c      	adds	r3, #60	; 0x3c
 800234c:	3304      	adds	r3, #4
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 80a0 	bne.w	80024ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a72      	ldr	r2, [pc, #456]	; (8002544 <PCD_EP_OutXfrComplete_int+0x210>)
 800237a:	4293      	cmp	r3, r2
 800237c:	f240 80dd 	bls.w	800253a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80d7 	beq.w	800253a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	e0cb      	b.n	800253a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	2320      	movs	r3, #32
 80023bc:	6093      	str	r3, [r2, #8]
 80023be:	e0bc      	b.n	800253a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80b7 	bne.w	800253a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a5d      	ldr	r2, [pc, #372]	; (8002544 <PCD_EP_OutXfrComplete_int+0x210>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d90f      	bls.n	80023f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f0:	6093      	str	r3, [r2, #8]
 80023f2:	e0a2      	b.n	800253a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002406:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	0159      	lsls	r1, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	440b      	add	r3, r1
 8002410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800241a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4403      	add	r3, r0
 800242a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800242e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4403      	add	r3, r0
 8002452:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4419      	add	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4403      	add	r3, r0
 8002468:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800246c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d114      	bne.n	800249e <PCD_EP_OutXfrComplete_int+0x16a>
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d108      	bne.n	800249e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002496:	461a      	mov	r2, r3
 8002498:	2101      	movs	r1, #1
 800249a:	f002 fc25 	bl	8004ce8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f004 fb55 	bl	8006b54 <HAL_PCD_DataOutStageCallback>
 80024aa:	e046      	b.n	800253a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a26      	ldr	r2, [pc, #152]	; (8002548 <PCD_EP_OutXfrComplete_int+0x214>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d124      	bne.n	80024fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ca:	461a      	mov	r2, r3
 80024cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d0:	6093      	str	r3, [r2, #8]
 80024d2:	e032      	b.n	800253a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ea:	461a      	mov	r2, r3
 80024ec:	2320      	movs	r3, #32
 80024ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f004 fb2c 	bl	8006b54 <HAL_PCD_DataOutStageCallback>
 80024fc:	e01d      	b.n	800253a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d114      	bne.n	800252e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d108      	bne.n	800252e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002526:	461a      	mov	r2, r3
 8002528:	2100      	movs	r1, #0
 800252a:	f002 fbdd 	bl	8004ce8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f004 fb0d 	bl	8006b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	4f54300a 	.word	0x4f54300a
 8002548:	4f54310a 	.word	0x4f54310a

0800254c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	333c      	adds	r3, #60	; 0x3c
 8002564:	3304      	adds	r3, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d90e      	bls.n	80025a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002598:	461a      	mov	r2, r3
 800259a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f004 fac5 	bl	8006b30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d90c      	bls.n	80025c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d108      	bne.n	80025c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025c0:	461a      	mov	r2, r3
 80025c2:	2101      	movs	r1, #1
 80025c4:	f002 fb90 	bl	8004ce8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	4f54300a 	.word	0x4f54300a

080025d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
 80025e4:	4613      	mov	r3, r2
 80025e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025f6:	883b      	ldrh	r3, [r7, #0]
 80025f8:	0419      	lsls	r1, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	430a      	orrs	r2, r1
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
 8002604:	e028      	b.n	8002658 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	4413      	add	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002614:	2300      	movs	r3, #0
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	e00d      	b.n	8002636 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	3340      	adds	r3, #64	; 0x40
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	4413      	add	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	3301      	adds	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	3b01      	subs	r3, #1
 800263c:	429a      	cmp	r2, r3
 800263e:	d3ec      	bcc.n	800261a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002640:	883b      	ldrh	r3, [r7, #0]
 8002642:	0418      	lsls	r0, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	3b01      	subs	r3, #1
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4302      	orrs	r2, r0
 8002650:	3340      	adds	r3, #64	; 0x40
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e264      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d075      	beq.n	80027aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	4ba3      	ldr	r3, [pc, #652]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ca:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d112      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b9d      	ldr	r3, [pc, #628]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e2:	d10b      	bne.n	80026fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b99      	ldr	r3, [pc, #612]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d05b      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d157      	bne.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e23f      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d106      	bne.n	8002714 <HAL_RCC_OscConfig+0x74>
 8002706:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a90      	ldr	r2, [pc, #576]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x98>
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a8a      	ldr	r2, [pc, #552]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a87      	ldr	r2, [pc, #540]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xb0>
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a83      	ldr	r2, [pc, #524]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b81      	ldr	r3, [pc, #516]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a80      	ldr	r2, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fa2c 	bl	8000bb4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fa28 	bl	8000bb4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e204      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xc0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fa18 	bl	8000bb4 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fa14 	bl	8000bb4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1f0      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b6c      	ldr	r3, [pc, #432]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c2:	4b62      	ldr	r3, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b5f      	ldr	r3, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b5c      	ldr	r3, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c4      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b56      	ldr	r3, [pc, #344]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4952      	ldr	r1, [pc, #328]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x2b0>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe f9cd 	bl	8000bb4 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe f9c9 	bl	8000bb4 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1a5      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4940      	ldr	r1, [pc, #256]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x2b0>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe f9ac 	bl	8000bb4 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe f9a8 	bl	8000bb4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e184      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d030      	beq.n	80028ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x2b4>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe f98c 	bl	8000bb4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe f988 	bl	8000bb4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e164      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x200>
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x2b4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe f975 	bl	8000bb4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ce:	f7fe f971 	bl	8000bb4 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e14d      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a0 	beq.w	8002a3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10f      	bne.n	800292a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCC_OscConfig+0x2ac>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d121      	bne.n	800297a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <HAL_RCC_OscConfig+0x2b8>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7fe f937 	bl	8000bb4 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	e011      	b.n	800296e <HAL_RCC_OscConfig+0x2ce>
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	42470000 	.word	0x42470000
 8002954:	42470e80 	.word	0x42470e80
 8002958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe f92a 	bl	8000bb4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e106      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296e:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <HAL_RCC_OscConfig+0x4e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x2f0>
 8002982:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a80      	ldr	r2, [pc, #512]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e01c      	b.n	80029ca <HAL_RCC_OscConfig+0x32a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x312>
 8002998:	4b7b      	ldr	r3, [pc, #492]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a7a      	ldr	r2, [pc, #488]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b78      	ldr	r3, [pc, #480]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a77      	ldr	r2, [pc, #476]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	e00b      	b.n	80029ca <HAL_RCC_OscConfig+0x32a>
 80029b2:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a74      	ldr	r2, [pc, #464]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	4b72      	ldr	r3, [pc, #456]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a71      	ldr	r2, [pc, #452]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029c4:	f023 0304 	bic.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d015      	beq.n	80029fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7fe f8ef 	bl	8000bb4 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe f8eb 	bl	8000bb4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e0c5      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ee      	beq.n	80029da <HAL_RCC_OscConfig+0x33a>
 80029fc:	e014      	b.n	8002a28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe f8d9 	bl	8000bb4 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe f8d5 	bl	8000bb4 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0af      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ee      	bne.n	8002a06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 809b 	beq.w	8002b7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d05c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d141      	bne.n	8002adc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_RCC_OscConfig+0x4ec>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe f8a9 	bl	8000bb4 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe f8a5 	bl	8000bb4 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e081      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	019b      	lsls	r3, r3, #6
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCC_OscConfig+0x4ec>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f87e 	bl	8000bb4 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abc:	f7fe f87a 	bl	8000bb4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e056      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x41c>
 8002ada:	e04e      	b.n	8002b7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_OscConfig+0x4ec>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe f867 	bl	8000bb4 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe f863 	bl	8000bb4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e03f      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x44a>
 8002b08:	e037      	b.n	8002b7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e032      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_RCC_OscConfig+0x4e8>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d028      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d121      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d11a      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b46:	4013      	ands	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d111      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40007000 	.word	0x40007000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	42470060 	.word	0x42470060

08002b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0cc      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d90c      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b8      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	494d      	ldr	r1, [pc, #308]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d044      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d107      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4e:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e067      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 0203 	bic.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4934      	ldr	r1, [pc, #208]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c80:	f7fd ff98 	bl	8000bb4 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7fd ff94 	bl	8000bb4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04f      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 020c 	and.w	r2, r3, #12
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d1eb      	bne.n	8002c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d20c      	bcs.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e032      	b.n	8002d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	490e      	ldr	r1, [pc, #56]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d16:	f000 f821 	bl	8002d5c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490a      	ldr	r1, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1c8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fef8 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08007168 	.word	0x08007168
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000004 	.word	0x20000004

08002d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d5c:	b5b0      	push	{r4, r5, r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d62:	2100      	movs	r1, #0
 8002d64:	6079      	str	r1, [r7, #4]
 8002d66:	2100      	movs	r1, #0
 8002d68:	60f9      	str	r1, [r7, #12]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d6e:	2100      	movs	r1, #0
 8002d70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d72:	4952      	ldr	r1, [pc, #328]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8002d74:	6889      	ldr	r1, [r1, #8]
 8002d76:	f001 010c 	and.w	r1, r1, #12
 8002d7a:	2908      	cmp	r1, #8
 8002d7c:	d00d      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x3e>
 8002d7e:	2908      	cmp	r1, #8
 8002d80:	f200 8094 	bhi.w	8002eac <HAL_RCC_GetSysClockFreq+0x150>
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0x32>
 8002d88:	2904      	cmp	r1, #4
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x38>
 8002d8c:	e08e      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d90:	60bb      	str	r3, [r7, #8]
       break;
 8002d92:	e08e      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d94:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d96:	60bb      	str	r3, [r7, #8]
      break;
 8002d98:	e08b      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d9a:	4948      	ldr	r1, [pc, #288]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8002d9c:	6849      	ldr	r1, [r1, #4]
 8002d9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002da2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da4:	4945      	ldr	r1, [pc, #276]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8002da6:	6849      	ldr	r1, [r1, #4]
 8002da8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002dac:	2900      	cmp	r1, #0
 8002dae:	d024      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4942      	ldr	r1, [pc, #264]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8002db2:	6849      	ldr	r1, [r1, #4]
 8002db4:	0989      	lsrs	r1, r1, #6
 8002db6:	4608      	mov	r0, r1
 8002db8:	f04f 0100 	mov.w	r1, #0
 8002dbc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002dc0:	f04f 0500 	mov.w	r5, #0
 8002dc4:	ea00 0204 	and.w	r2, r0, r4
 8002dc8:	ea01 0305 	and.w	r3, r1, r5
 8002dcc:	493d      	ldr	r1, [pc, #244]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dce:	fb01 f003 	mul.w	r0, r1, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	fb01 f102 	mul.w	r1, r1, r2
 8002dd8:	1844      	adds	r4, r0, r1
 8002dda:	493a      	ldr	r1, [pc, #232]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ddc:	fba2 0101 	umull	r0, r1, r2, r1
 8002de0:	1863      	adds	r3, r4, r1
 8002de2:	4619      	mov	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f7fd f9ec 	bl	80001c8 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e04a      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	461a      	mov	r2, r3
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	ea02 0400 	and.w	r4, r2, r0
 8002e12:	ea03 0501 	and.w	r5, r3, r1
 8002e16:	4620      	mov	r0, r4
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	014b      	lsls	r3, r1, #5
 8002e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e28:	0142      	lsls	r2, r0, #5
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	1b00      	subs	r0, r0, r4
 8002e30:	eb61 0105 	sbc.w	r1, r1, r5
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	018b      	lsls	r3, r1, #6
 8002e3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e42:	0182      	lsls	r2, r0, #6
 8002e44:	1a12      	subs	r2, r2, r0
 8002e46:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	00d9      	lsls	r1, r3, #3
 8002e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e58:	00d0      	lsls	r0, r2, #3
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	1912      	adds	r2, r2, r4
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f04f 0100 	mov.w	r1, #0
 8002e6c:	0299      	lsls	r1, r3, #10
 8002e6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e72:	0290      	lsls	r0, r2, #10
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	f7fd f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x160>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	60bb      	str	r3, [r7, #8]
      break;
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002eae:	60bb      	str	r3, [r7, #8]
      break;
 8002eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	017d7840 	.word	0x017d7840

08002ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000000 	.word	0x20000000

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fd9e 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fa2e 	bl	8003380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d122      	bne.n	8002fda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d11b      	bne.n	8002fda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0202 	mvn.w	r2, #2
 8002faa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f9bf 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8002fc6:	e005      	b.n	8002fd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f9b1 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9c2 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d122      	bne.n	800302e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d11b      	bne.n	800302e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0204 	mvn.w	r2, #4
 8002ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f995 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 800301a:	e005      	b.n	8003028 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f987 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f998 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d122      	bne.n	8003082 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	d11b      	bne.n	8003082 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f06f 0208 	mvn.w	r2, #8
 8003052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2204      	movs	r2, #4
 8003058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f96b 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 800306e:	e005      	b.n	800307c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f95d 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f96e 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b10      	cmp	r3, #16
 800308e:	d122      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b10      	cmp	r3, #16
 800309c:	d11b      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f06f 0210 	mvn.w	r2, #16
 80030a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2208      	movs	r2, #8
 80030ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f941 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 80030c2:	e005      	b.n	80030d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f933 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f944 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10e      	bne.n	8003102 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f06f 0201 	mvn.w	r2, #1
 80030fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f90d 	bl	800331c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d10e      	bne.n	800312e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d107      	bne.n	800312e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fae9 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d10e      	bne.n	800315a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d107      	bne.n	800315a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f909 	bl	800336c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b20      	cmp	r3, #32
 8003166:	d10e      	bne.n	8003186 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	d107      	bne.n	8003186 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0220 	mvn.w	r2, #32
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fab3 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_ConfigClockSource+0x1c>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0b4      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x186>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e2:	d03e      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0xd4>
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	f200 8087 	bhi.w	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f0:	f000 8086 	beq.w	8003300 <HAL_TIM_ConfigClockSource+0x172>
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f8:	d87f      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 80031fa:	2b70      	cmp	r3, #112	; 0x70
 80031fc:	d01a      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0xa6>
 80031fe:	2b70      	cmp	r3, #112	; 0x70
 8003200:	d87b      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 8003202:	2b60      	cmp	r3, #96	; 0x60
 8003204:	d050      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0x11a>
 8003206:	2b60      	cmp	r3, #96	; 0x60
 8003208:	d877      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 800320a:	2b50      	cmp	r3, #80	; 0x50
 800320c:	d03c      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xfa>
 800320e:	2b50      	cmp	r3, #80	; 0x50
 8003210:	d873      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d058      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x13a>
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d86f      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 800321a:	2b30      	cmp	r3, #48	; 0x30
 800321c:	d064      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x15a>
 800321e:	2b30      	cmp	r3, #48	; 0x30
 8003220:	d86b      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 8003222:	2b20      	cmp	r3, #32
 8003224:	d060      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x15a>
 8003226:	2b20      	cmp	r3, #32
 8003228:	d867      	bhi.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d05c      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x15a>
 800322e:	2b10      	cmp	r3, #16
 8003230:	d05a      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x15a>
 8003232:	e062      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f000 f9b6 	bl	80035b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003256:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
      break;
 8003260:	e04f      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6899      	ldr	r1, [r3, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f000 f99f 	bl	80035b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003284:	609a      	str	r2, [r3, #8]
      break;
 8003286:	e03c      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	461a      	mov	r2, r3
 8003296:	f000 f913 	bl	80034c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2150      	movs	r1, #80	; 0x50
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f96c 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032a6:	e02c      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 f932 	bl	800351e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2160      	movs	r1, #96	; 0x60
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f95c 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032c6:	e01c      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	f000 f8f3 	bl	80034c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f94c 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032e6:	e00c      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 f943 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 80032f8:	e003      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	73fb      	strb	r3, [r7, #15]
      break;
 80032fe:	e000      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a40      	ldr	r2, [pc, #256]	; (8003494 <TIM_Base_SetConfig+0x114>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d00f      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <TIM_Base_SetConfig+0x118>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3c      	ldr	r2, [pc, #240]	; (800349c <TIM_Base_SetConfig+0x11c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <TIM_Base_SetConfig+0x120>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3a      	ldr	r2, [pc, #232]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <TIM_Base_SetConfig+0x114>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d027      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <TIM_Base_SetConfig+0x118>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d023      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	; (800349c <TIM_Base_SetConfig+0x11c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <TIM_Base_SetConfig+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01b      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d017      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <TIM_Base_SetConfig+0x128>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a27      	ldr	r2, [pc, #156]	; (80034ac <TIM_Base_SetConfig+0x12c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00f      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <TIM_Base_SetConfig+0x130>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <TIM_Base_SetConfig+0x134>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <TIM_Base_SetConfig+0x138>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a23      	ldr	r2, [pc, #140]	; (80034bc <TIM_Base_SetConfig+0x13c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <TIM_Base_SetConfig+0x114>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_Base_SetConfig+0xf8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	615a      	str	r2, [r3, #20]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800
 80034a0:	40000c00 	.word	0x40000c00
 80034a4:	40010400 	.word	0x40010400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800
 80034b4:	40001800 	.word	0x40001800
 80034b8:	40001c00 	.word	0x40001c00
 80034bc:	40002000 	.word	0x40002000

080034c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	f023 0201 	bic.w	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f023 030a 	bic.w	r3, r3, #10
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	621a      	str	r2, [r3, #32]
}
 8003512:	bf00      	nop
 8003514:	371c      	adds	r7, #28
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800351e:	b480      	push	{r7}
 8003520:	b087      	sub	sp, #28
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0210 	bic.w	r2, r3, #16
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	031b      	lsls	r3, r3, #12
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800355a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	f043 0307 	orr.w	r3, r3, #7
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	021a      	lsls	r2, r3, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e05a      	b.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a21      	ldr	r2, [pc, #132]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d01d      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10c      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40010400 	.word	0x40010400
 80036e4:	40014000 	.word	0x40014000
 80036e8:	40001800 	.word	0x40001800

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003714:	b084      	sub	sp, #16
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	f107 001c 	add.w	r0, r7, #28
 8003722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2b01      	cmp	r3, #1
 800372a:	d122      	bne.n	8003772 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 fb1c 	bl	8004da4 <USB_CoreReset>
 800376c:	4603      	mov	r3, r0
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	e01a      	b.n	80037a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 fb10 	bl	8004da4 <USB_CoreReset>
 8003784:	4603      	mov	r3, r0
 8003786:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
 800379a:	e005      	b.n	80037a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10b      	bne.n	80037c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f043 0206 	orr.w	r2, r3, #6
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037d2:	b004      	add	sp, #16
 80037d4:	4770      	bx	lr
	...

080037d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d165      	bne.n	80038b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a41      	ldr	r2, [pc, #260]	; (80038f4 <USB_SetTurnaroundTime+0x11c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d906      	bls.n	8003802 <USB_SetTurnaroundTime+0x2a>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <USB_SetTurnaroundTime+0x120>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d202      	bcs.n	8003802 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037fc:	230f      	movs	r3, #15
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	e062      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <USB_SetTurnaroundTime+0x120>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d306      	bcc.n	8003818 <USB_SetTurnaroundTime+0x40>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <USB_SetTurnaroundTime+0x124>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d202      	bcs.n	8003818 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003812:	230e      	movs	r3, #14
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e057      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a38      	ldr	r2, [pc, #224]	; (80038fc <USB_SetTurnaroundTime+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d306      	bcc.n	800382e <USB_SetTurnaroundTime+0x56>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4a37      	ldr	r2, [pc, #220]	; (8003900 <USB_SetTurnaroundTime+0x128>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d202      	bcs.n	800382e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003828:	230d      	movs	r3, #13
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e04c      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4a33      	ldr	r2, [pc, #204]	; (8003900 <USB_SetTurnaroundTime+0x128>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d306      	bcc.n	8003844 <USB_SetTurnaroundTime+0x6c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4a32      	ldr	r2, [pc, #200]	; (8003904 <USB_SetTurnaroundTime+0x12c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d802      	bhi.n	8003844 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800383e:	230c      	movs	r3, #12
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e041      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <USB_SetTurnaroundTime+0x12c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d906      	bls.n	800385a <USB_SetTurnaroundTime+0x82>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a2e      	ldr	r2, [pc, #184]	; (8003908 <USB_SetTurnaroundTime+0x130>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d802      	bhi.n	800385a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003854:	230b      	movs	r3, #11
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e036      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <USB_SetTurnaroundTime+0x130>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d906      	bls.n	8003870 <USB_SetTurnaroundTime+0x98>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4a29      	ldr	r2, [pc, #164]	; (800390c <USB_SetTurnaroundTime+0x134>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d802      	bhi.n	8003870 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800386a:	230a      	movs	r3, #10
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e02b      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <USB_SetTurnaroundTime+0x134>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d906      	bls.n	8003886 <USB_SetTurnaroundTime+0xae>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <USB_SetTurnaroundTime+0x138>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d202      	bcs.n	8003886 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003880:	2309      	movs	r3, #9
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e020      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a21      	ldr	r2, [pc, #132]	; (8003910 <USB_SetTurnaroundTime+0x138>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d306      	bcc.n	800389c <USB_SetTurnaroundTime+0xc4>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a20      	ldr	r2, [pc, #128]	; (8003914 <USB_SetTurnaroundTime+0x13c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d802      	bhi.n	800389c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003896:	2308      	movs	r3, #8
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e015      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <USB_SetTurnaroundTime+0x13c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d906      	bls.n	80038b2 <USB_SetTurnaroundTime+0xda>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <USB_SetTurnaroundTime+0x140>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d202      	bcs.n	80038b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038ac:	2307      	movs	r3, #7
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e00a      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038b2:	2306      	movs	r3, #6
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e007      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038be:	2309      	movs	r3, #9
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e001      	b.n	80038c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038c4:	2309      	movs	r3, #9
 80038c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	029b      	lsls	r3, r3, #10
 80038dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	00d8acbf 	.word	0x00d8acbf
 80038f8:	00e4e1c0 	.word	0x00e4e1c0
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	01067380 	.word	0x01067380
 8003904:	011a499f 	.word	0x011a499f
 8003908:	01312cff 	.word	0x01312cff
 800390c:	014ca43f 	.word	0x014ca43f
 8003910:	016e3600 	.word	0x016e3600
 8003914:	01a6ab1f 	.word	0x01a6ab1f
 8003918:	01e84800 	.word	0x01e84800

0800391c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0201 	bic.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d115      	bne.n	80039ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800398e:	2001      	movs	r0, #1
 8003990:	f7fd f91c 	bl	8000bcc <HAL_Delay>
      ms++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3301      	adds	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f001 f972 	bl	8004c84 <USB_GetMode>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d01e      	beq.n	80039e4 <USB_SetCurrentMode+0x84>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b31      	cmp	r3, #49	; 0x31
 80039aa:	d9f0      	bls.n	800398e <USB_SetCurrentMode+0x2e>
 80039ac:	e01a      	b.n	80039e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d115      	bne.n	80039e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039c0:	2001      	movs	r0, #1
 80039c2:	f7fd f903 	bl	8000bcc <HAL_Delay>
      ms++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3301      	adds	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f001 f959 	bl	8004c84 <USB_GetMode>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <USB_SetCurrentMode+0x84>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b31      	cmp	r3, #49	; 0x31
 80039dc:	d9f0      	bls.n	80039c0 <USB_SetCurrentMode+0x60>
 80039de:	e001      	b.n	80039e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e005      	b.n	80039f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b32      	cmp	r3, #50	; 0x32
 80039e8:	d101      	bne.n	80039ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f8:	b084      	sub	sp, #16
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e009      	b.n	8003a2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3340      	adds	r3, #64	; 0x40
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b0e      	cmp	r3, #14
 8003a30:	d9f2      	bls.n	8003a18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11c      	bne.n	8003a72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
 8003a70:	e00b      	b.n	8003a8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2300      	movs	r3, #0
 8003a94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	680b      	ldr	r3, [r1, #0]
 8003aa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10c      	bne.n	8003aca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f945 	bl	8003d48 <USB_SetDevSpeed>
 8003abe:	e008      	b.n	8003ad2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f940 	bl	8003d48 <USB_SetDevSpeed>
 8003ac8:	e003      	b.n	8003ad2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aca:	2103      	movs	r1, #3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f93b 	bl	8003d48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8f3 	bl	8003cc0 <USB_FlushTxFifo>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f90f 	bl	8003d08 <USB_FlushRxFifo>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e043      	b.n	8003ba6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b34:	d118      	bne.n	8003b68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e013      	b.n	8003b7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e008      	b.n	8003b7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3b7      	bcc.n	8003b1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e043      	b.n	8003c3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bca:	d118      	bne.n	8003bfe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	461a      	mov	r2, r3
 8003be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e013      	b.n	8003c10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e008      	b.n	8003c10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2300      	movs	r3, #0
 8003c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3b7      	bcc.n	8003bb4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <USB_DevInit+0x2c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb8:	b004      	add	sp, #16
 8003cba:	4770      	bx	lr
 8003cbc:	803c3800 	.word	0x803c3800

08003cc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	f043 0220 	orr.w	r2, r3, #32
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <USB_FlushTxFifo+0x44>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e006      	b.n	8003cf8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d0f1      	beq.n	8003cda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	00030d40 	.word	0x00030d40

08003d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2210      	movs	r2, #16
 8003d18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <USB_FlushRxFifo+0x3c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e006      	b.n	8003d38 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d0f1      	beq.n	8003d1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	00030d40 	.word	0x00030d40

08003d48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b087      	sub	sp, #28
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0306 	and.w	r3, r3, #6
 8003d92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]
 8003d9e:	e00a      	b.n	8003db6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d002      	beq.n	8003dac <USB_GetDevSpeed+0x32>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d102      	bne.n	8003db2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dac:	2302      	movs	r3, #2
 8003dae:	75fb      	strb	r3, [r7, #23]
 8003db0:	e001      	b.n	8003db6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003db2:	230f      	movs	r3, #15
 8003db4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d13a      	bne.n	8003e56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	68f9      	ldr	r1, [r7, #12]
 8003dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d155      	bne.n	8003ec4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	78db      	ldrb	r3, [r3, #3]
 8003e32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	059b      	lsls	r3, r3, #22
 8003e3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	0151      	lsls	r1, r2, #5
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	440a      	add	r2, r1
 8003e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	e036      	b.n	8003ec4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11a      	bne.n	8003ec4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	78db      	ldrb	r3, [r3, #3]
 8003ea8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	785b      	ldrb	r3, [r3, #1]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d161      	bne.n	8003fb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f06:	d11f      	bne.n	8003f48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2101      	movs	r1, #1
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f68:	4013      	ands	r3, r2
 8003f6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	0159      	lsls	r1, r3, #5
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	440b      	add	r3, r1
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	4619      	mov	r1, r3
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <USB_DeactivateEndpoint+0x1b0>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
 8003fb2:	e060      	b.n	8004076 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fca:	d11f      	bne.n	800400c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	0151      	lsls	r1, r2, #5
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	440a      	add	r2, r1
 8004002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800400a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	2101      	movs	r1, #1
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	43db      	mvns	r3, r3
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402c:	4013      	ands	r3, r2
 800402e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	43db      	mvns	r3, r3
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004050:	4013      	ands	r3, r2
 8004052:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0159      	lsls	r1, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	440b      	add	r3, r1
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	4619      	mov	r1, r3
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <USB_DeactivateEndpoint+0x1b4>)
 8004072:	4013      	ands	r3, r2
 8004074:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	ec337800 	.word	0xec337800
 8004088:	eff37800 	.word	0xeff37800

0800408c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	785b      	ldrb	r3, [r3, #1]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 815c 	bne.w	8004366 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d132      	bne.n	800411c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	0151      	lsls	r1, r2, #5
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	440a      	add	r2, r1
 80040cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004114:	0cdb      	lsrs	r3, r3, #19
 8004116:	04db      	lsls	r3, r3, #19
 8004118:	6113      	str	r3, [r2, #16]
 800411a:	e074      	b.n	8004206 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004136:	0cdb      	lsrs	r3, r3, #19
 8004138:	04db      	lsls	r3, r3, #19
 800413a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004156:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800415a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800415e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6959      	ldr	r1, [r3, #20]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	440b      	add	r3, r1
 8004178:	1e59      	subs	r1, r3, #1
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004182:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004184:	4b9d      	ldr	r3, [pc, #628]	; (80043fc <USB_EPStartXfer+0x370>)
 8004186:	400b      	ands	r3, r1
 8004188:	69b9      	ldr	r1, [r7, #24]
 800418a:	0148      	lsls	r0, r1, #5
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	4401      	add	r1, r0
 8004190:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004194:	4313      	orrs	r3, r2
 8004196:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ae:	69b9      	ldr	r1, [r7, #24]
 80041b0:	0148      	lsls	r0, r1, #5
 80041b2:	69f9      	ldr	r1, [r7, #28]
 80041b4:	4401      	add	r1, r0
 80041b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ba:	4313      	orrs	r3, r2
 80041bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	78db      	ldrb	r3, [r3, #3]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d11f      	bne.n	8004206 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004204:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d14b      	bne.n	80042a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	78db      	ldrb	r3, [r3, #3]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d128      	bne.n	8004282 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e00f      	b.n	8004282 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	0151      	lsls	r1, r2, #5
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	440a      	add	r2, r1
 8004278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e12f      	b.n	8004504 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	0151      	lsls	r1, r2, #5
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	440a      	add	r2, r1
 80042ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	78db      	ldrb	r3, [r3, #3]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d015      	beq.n	80042f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8117 	beq.w	8004504 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	2101      	movs	r1, #1
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042f2:	4313      	orrs	r3, r2
 80042f4:	634b      	str	r3, [r1, #52]	; 0x34
 80042f6:	e105      	b.n	8004504 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d110      	bne.n	800432a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	0151      	lsls	r1, r2, #5
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	440a      	add	r2, r1
 800431e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004322:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e00f      	b.n	800434a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	0151      	lsls	r1, r2, #5
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	440a      	add	r2, r1
 8004340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	b298      	uxth	r0, r3
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4603      	mov	r3, r0
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fa2b 	bl	80047ba <USB_WritePacket>
 8004364:	e0ce      	b.n	8004504 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004380:	0cdb      	lsrs	r3, r3, #19
 8004382:	04db      	lsls	r3, r3, #19
 8004384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d126      	bne.n	8004400 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	0148      	lsls	r0, r1, #5
 80043cc:	69f9      	ldr	r1, [r7, #28]
 80043ce:	4401      	add	r1, r0
 80043d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043d4:	4313      	orrs	r3, r2
 80043d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043f6:	6113      	str	r3, [r2, #16]
 80043f8:	e036      	b.n	8004468 <USB_EPStartXfer+0x3dc>
 80043fa:	bf00      	nop
 80043fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4413      	add	r3, r2
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	8afb      	ldrh	r3, [r7, #22]
 8004426:	04d9      	lsls	r1, r3, #19
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <USB_EPStartXfer+0x484>)
 800442a:	400b      	ands	r3, r1
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	0148      	lsls	r0, r1, #5
 8004430:	69f9      	ldr	r1, [r7, #28]
 8004432:	4401      	add	r1, r0
 8004434:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004438:	4313      	orrs	r3, r2
 800443a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	8af9      	ldrh	r1, [r7, #22]
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	0148      	lsls	r0, r1, #5
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	4401      	add	r1, r0
 8004460:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004464:	4313      	orrs	r3, r2
 8004466:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10d      	bne.n	800448a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	68d9      	ldr	r1, [r3, #12]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	460a      	mov	r2, r1
 8004488:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d128      	bne.n	80044e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d110      	bne.n	80044c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00f      	b.n	80044e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	1ff80000 	.word	0x1ff80000

08004514 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80cd 	bne.w	80046d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d132      	bne.n	80045a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	0151      	lsls	r1, r2, #5
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	440a      	add	r2, r1
 8004554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800455c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004560:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459c:	0cdb      	lsrs	r3, r3, #19
 800459e:	04db      	lsls	r3, r3, #19
 80045a0:	6113      	str	r3, [r2, #16]
 80045a2:	e04e      	b.n	8004642 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	0cdb      	lsrs	r3, r3, #19
 80045c0:	04db      	lsls	r3, r3, #19
 80045c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d903      	bls.n	80045fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800461a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004632:	6939      	ldr	r1, [r7, #16]
 8004634:	0148      	lsls	r0, r1, #5
 8004636:	6979      	ldr	r1, [r7, #20]
 8004638:	4401      	add	r1, r0
 800463a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800463e:	4313      	orrs	r3, r2
 8004640:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d11e      	bne.n	8004686 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e092      	b.n	80047ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	0151      	lsls	r1, r2, #5
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	440a      	add	r2, r1
 800469c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d07e      	beq.n	80047ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	6979      	ldr	r1, [r7, #20]
 80046c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ca:	4313      	orrs	r3, r2
 80046cc:	634b      	str	r3, [r1, #52]	; 0x34
 80046ce:	e06d      	b.n	80047ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ea:	0cdb      	lsrs	r3, r3, #19
 80046ec:	04db      	lsls	r3, r3, #19
 80046ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800470e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004712:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004742:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	6939      	ldr	r1, [r7, #16]
 800475c:	0148      	lsls	r0, r1, #5
 800475e:	6979      	ldr	r1, [r7, #20]
 8004760:	4401      	add	r1, r0
 8004762:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10d      	bne.n	800478c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68d9      	ldr	r1, [r3, #12]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	460a      	mov	r2, r1
 800478a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b089      	sub	sp, #36	; 0x24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	4611      	mov	r1, r2
 80047c6:	461a      	mov	r2, r3
 80047c8:	460b      	mov	r3, r1
 80047ca:	71fb      	strb	r3, [r7, #7]
 80047cc:	4613      	mov	r3, r2
 80047ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d123      	bne.n	8004828 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047e0:	88bb      	ldrh	r3, [r7, #4]
 80047e2:	3303      	adds	r3, #3
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e018      	b.n	8004820 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	031a      	lsls	r2, r3, #12
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fa:	461a      	mov	r2, r3
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	3301      	adds	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3301      	adds	r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	429a      	cmp	r2, r3
 8004826:	d3e2      	bcc.n	80047ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3724      	adds	r7, #36	; 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004836:	b480      	push	{r7}
 8004838:	b08b      	sub	sp, #44	; 0x2c
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	b29b      	uxth	r3, r3
 8004852:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800485c:	2300      	movs	r3, #0
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	e014      	b.n	800488c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	601a      	str	r2, [r3, #0]
    pDest++;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	3301      	adds	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3301      	adds	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	3301      	adds	r3, #1
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	3301      	adds	r3, #1
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	3301      	adds	r3, #1
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	d3e6      	bcc.n	8004862 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004894:	8bfb      	ldrh	r3, [r7, #30]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d01e      	beq.n	80048d8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a4:	461a      	mov	r2, r3
 80048a6:	f107 0310 	add.w	r3, r7, #16
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	701a      	strb	r2, [r3, #0]
      i++;
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	3301      	adds	r3, #1
 80048c4:	623b      	str	r3, [r7, #32]
      pDest++;
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	3301      	adds	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048cc:	8bfb      	ldrh	r3, [r7, #30]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048d2:	8bfb      	ldrh	r3, [r7, #30]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ea      	bne.n	80048ae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048da:	4618      	mov	r0, r3
 80048dc:	372c      	adds	r7, #44	; 0x2c
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d12c      	bne.n	800495c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	db12      	blt.n	800493a <USB_EPSetStall+0x54>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004938:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	0151      	lsls	r1, r2, #5
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	440a      	add	r2, r1
 8004950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004954:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e02b      	b.n	80049b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	db12      	blt.n	8004994 <USB_EPSetStall+0xae>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004992:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d128      	bne.n	8004a30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	78db      	ldrb	r3, [r3, #3]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d003      	beq.n	8004a0e <USB_EPClearStall+0x4c>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	78db      	ldrb	r3, [r3, #3]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d138      	bne.n	8004a80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e027      	b.n	8004a80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	0151      	lsls	r1, r2, #5
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	440a      	add	r2, r1
 8004a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d003      	beq.n	8004a60 <USB_EPClearStall+0x9e>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	78db      	ldrb	r3, [r3, #3]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d10f      	bne.n	8004a80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ab0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b08:	f023 0302 	bic.w	r3, r3, #2
 8004b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4013      	ands	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	0c1b      	lsrs	r3, r3, #16
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	b29b      	uxth	r3, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	01db      	lsls	r3, r3, #7
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4013      	ands	r3, r2
 8004c74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c76:	68bb      	ldr	r3, [r7, #8]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0301 	and.w	r3, r3, #1
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	333c      	adds	r3, #60	; 0x3c
 8004cfe:	3304      	adds	r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <USB_EP0_OutStart+0xb8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d90a      	bls.n	8004d22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1c:	d101      	bne.n	8004d22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e037      	b.n	8004d92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d50:	f043 0318 	orr.w	r3, r3, #24
 8004d54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d6a:	7afb      	ldrb	r3, [r7, #11]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d10f      	bne.n	8004d90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	4f54300a 	.word	0x4f54300a

08004da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <USB_CoreReset+0x60>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e01a      	b.n	8004df6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	daf3      	bge.n	8004db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <USB_CoreReset+0x60>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d0f1      	beq.n	8004dd8 <USB_CoreReset+0x34>

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	00030d40 	.word	0x00030d40

08004e08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e18:	f002 f906 	bl	8007028 <USBD_static_malloc>
 8004e1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e066      	b.n	8004efe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7c1b      	ldrb	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d119      	bne.n	8004e74 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e44:	2202      	movs	r2, #2
 8004e46:	2181      	movs	r1, #129	; 0x81
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 ffca 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e58:	2202      	movs	r2, #2
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f001 ffc0 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004e72:	e016      	b.n	8004ea2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e74:	2340      	movs	r3, #64	; 0x40
 8004e76:	2202      	movs	r2, #2
 8004e78:	2181      	movs	r1, #129	; 0x81
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 ffb1 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	2202      	movs	r2, #2
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 ffa8 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	2203      	movs	r2, #3
 8004ea6:	2182      	movs	r1, #130	; 0x82
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 ff9a 	bl	8006de2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7c1b      	ldrb	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f002 f86b 	bl	8006fc0 <USBD_LL_PrepareReceive>
 8004eea:	e007      	b.n	8004efc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 f862 	bl	8006fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f12:	2181      	movs	r1, #129	; 0x81
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f001 ff8a 	bl	8006e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f20:	2101      	movs	r1, #1
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 ff83 	bl	8006e2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f30:	2182      	movs	r1, #130	; 0x82
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 ff7b 	bl	8006e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f62:	4618      	mov	r0, r3
 8004f64:	f002 f86e 	bl	8007044 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0af      	b.n	8005104 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d03f      	beq.n	8005030 <USBD_CDC_Setup+0xb4>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	f040 809f 	bne.w	80050f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	88db      	ldrh	r3, [r3, #6]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d02e      	beq.n	800501c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b25b      	sxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da16      	bge.n	8004ff6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004fd4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	88d2      	ldrh	r2, [r2, #6]
 8004fda:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	88db      	ldrh	r3, [r3, #6]
 8004fe0:	2b07      	cmp	r3, #7
 8004fe2:	bf28      	it	cs
 8004fe4:	2307      	movcs	r3, #7
 8004fe6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	89fa      	ldrh	r2, [r7, #14]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fae9 	bl	80065c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004ff4:	e085      	b.n	8005102 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	785a      	ldrb	r2, [r3, #1]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	88db      	ldrh	r3, [r3, #6]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800500c:	6939      	ldr	r1, [r7, #16]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	88db      	ldrh	r3, [r3, #6]
 8005012:	461a      	mov	r2, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fb02 	bl	800661e <USBD_CtlPrepareRx>
      break;
 800501a:	e072      	b.n	8005102 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	7850      	ldrb	r0, [r2, #1]
 8005028:	2200      	movs	r2, #0
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	4798      	blx	r3
      break;
 800502e:	e068      	b.n	8005102 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b0b      	cmp	r3, #11
 8005036:	d852      	bhi.n	80050de <USBD_CDC_Setup+0x162>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <USBD_CDC_Setup+0xc4>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	08005071 	.word	0x08005071
 8005044:	080050ed 	.word	0x080050ed
 8005048:	080050df 	.word	0x080050df
 800504c:	080050df 	.word	0x080050df
 8005050:	080050df 	.word	0x080050df
 8005054:	080050df 	.word	0x080050df
 8005058:	080050df 	.word	0x080050df
 800505c:	080050df 	.word	0x080050df
 8005060:	080050df 	.word	0x080050df
 8005064:	080050df 	.word	0x080050df
 8005068:	0800509b 	.word	0x0800509b
 800506c:	080050c5 	.word	0x080050c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d107      	bne.n	800508c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800507c:	f107 030a 	add.w	r3, r7, #10
 8005080:	2202      	movs	r2, #2
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f001 fa9e 	bl	80065c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800508a:	e032      	b.n	80050f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f001 fa28 	bl	80064e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	75fb      	strb	r3, [r7, #23]
          break;
 8005098:	e02b      	b.n	80050f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80050a6:	f107 030d 	add.w	r3, r7, #13
 80050aa:	2201      	movs	r2, #1
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fa89 	bl	80065c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050b4:	e01d      	b.n	80050f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fa13 	bl	80064e4 <USBD_CtlError>
            ret = USBD_FAIL;
 80050be:	2303      	movs	r3, #3
 80050c0:	75fb      	strb	r3, [r7, #23]
          break;
 80050c2:	e016      	b.n	80050f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d00f      	beq.n	80050f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 fa06 	bl	80064e4 <USBD_CtlError>
            ret = USBD_FAIL;
 80050d8:	2303      	movs	r3, #3
 80050da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050dc:	e008      	b.n	80050f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050de:	6839      	ldr	r1, [r7, #0]
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f9ff 	bl	80064e4 <USBD_CtlError>
          ret = USBD_FAIL;
 80050e6:	2303      	movs	r3, #3
 80050e8:	75fb      	strb	r3, [r7, #23]
          break;
 80050ea:	e002      	b.n	80050f2 <USBD_CDC_Setup+0x176>
          break;
 80050ec:	bf00      	nop
 80050ee:	e008      	b.n	8005102 <USBD_CDC_Setup+0x186>
          break;
 80050f0:	bf00      	nop
      }
      break;
 80050f2:	e006      	b.n	8005102 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f001 f9f4 	bl	80064e4 <USBD_CtlError>
      ret = USBD_FAIL;
 80050fc:	2303      	movs	r3, #3
 80050fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005100:	bf00      	nop
  }

  return (uint8_t)ret;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800511e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800512a:	2303      	movs	r3, #3
 800512c:	e04f      	b.n	80051ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005134:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3318      	adds	r3, #24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d029      	beq.n	80051a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3318      	adds	r3, #24
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	78f9      	ldrb	r1, [r7, #3]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	460b      	mov	r3, r1
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	1a5b      	subs	r3, r3, r1
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4403      	add	r3, r0
 800516c:	3344      	adds	r3, #68	; 0x44
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	fbb2 f1f3 	udiv	r1, r2, r3
 8005174:	fb03 f301 	mul.w	r3, r3, r1
 8005178:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800517a:	2b00      	cmp	r3, #0
 800517c:	d110      	bne.n	80051a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3318      	adds	r3, #24
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005192:	78f9      	ldrb	r1, [r7, #3]
 8005194:	2300      	movs	r3, #0
 8005196:	2200      	movs	r2, #0
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fef0 	bl	8006f7e <USBD_LL_Transmit>
 800519e:	e015      	b.n	80051cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e015      	b.n	8005224 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 ff00 	bl	8007002 <USBD_LL_GetRxDataSize>
 8005202:	4602      	mov	r2, r0
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800521e:	4611      	mov	r1, r2
 8005220:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800523a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005242:	2303      	movs	r3, #3
 8005244:	e01b      	b.n	800527e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d015      	beq.n	800527c <USBD_CDC_EP0_RxReady+0x50>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005256:	2bff      	cmp	r3, #255	; 0xff
 8005258:	d010      	beq.n	800527c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005268:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005270:	b292      	uxth	r2, r2
 8005272:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2243      	movs	r2, #67	; 0x43
 8005294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005296:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	20000094 	.word	0x20000094

080052a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2243      	movs	r2, #67	; 0x43
 80052b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80052b6:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20000050 	.word	0x20000050

080052c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2243      	movs	r2, #67	; 0x43
 80052d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80052d6:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	200000d8 	.word	0x200000d8

080052e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	220a      	movs	r2, #10
 80052f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052f6:	4b03      	ldr	r3, [pc, #12]	; (8005304 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	2000000c 	.word	0x2000000c

08005308 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	e004      	b.n	8005326 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005344:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800534c:	2303      	movs	r3, #3
 800534e:	e008      	b.n	8005362 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800537e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005386:	2303      	movs	r3, #3
 8005388:	e004      	b.n	8005394 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e016      	b.n	80053ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7c1b      	ldrb	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d0:	2101      	movs	r1, #1
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 fdf4 	bl	8006fc0 <USBD_LL_PrepareReceive>
 80053d8:	e007      	b.n	80053ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053e0:	2340      	movs	r3, #64	; 0x40
 80053e2:	2101      	movs	r1, #1
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 fdeb 	bl	8006fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005408:	2303      	movs	r3, #3
 800540a:	e01f      	b.n	800544c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	79fa      	ldrb	r2, [r7, #7]
 800543e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f001 fc67 	bl	8006d14 <USBD_LL_Init>
 8005446:	4603      	mov	r3, r0
 8005448:	75fb      	strb	r3, [r7, #23]

  return ret;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	e016      	b.n	800549a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	f107 020e 	add.w	r2, r7, #14
 800548c:	4610      	mov	r0, r2
 800548e:	4798      	blx	r3
 8005490:	4602      	mov	r2, r0
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 fc7e 	bl	8006dac <USBD_LL_Start>
 80054b0:	4603      	mov	r3, r0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80054dc:	2303      	movs	r3, #3
 80054de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	4611      	mov	r1, r2
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	4611      	mov	r1, r2
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
  }

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 ff90 	bl	8006470 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	2b02      	cmp	r3, #2
 8005572:	d01a      	beq.n	80055aa <USBD_LL_SetupStage+0x72>
 8005574:	2b02      	cmp	r3, #2
 8005576:	d822      	bhi.n	80055be <USBD_LL_SetupStage+0x86>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <USBD_LL_SetupStage+0x4a>
 800557c:	2b01      	cmp	r3, #1
 800557e:	d00a      	beq.n	8005596 <USBD_LL_SetupStage+0x5e>
 8005580:	e01d      	b.n	80055be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa62 	bl	8005a54 <USBD_StdDevReq>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]
      break;
 8005594:	e020      	b.n	80055d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fac6 	bl	8005b30 <USBD_StdItfReq>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
      break;
 80055a8:	e016      	b.n	80055d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fb05 	bl	8005bc2 <USBD_StdEPReq>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
      break;
 80055bc:	e00c      	b.n	80055d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 fc4d 	bl	8006e6c <USBD_LL_StallEP>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
      break;
 80055d6:	bf00      	nop
  }

  return ret;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	460b      	mov	r3, r1
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80055f0:	7afb      	ldrb	r3, [r7, #11]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d138      	bne.n	8005668 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80055fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005604:	2b03      	cmp	r3, #3
 8005606:	d14a      	bne.n	800569e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	d913      	bls.n	800563c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	1ad2      	subs	r2, r2, r3
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	4293      	cmp	r3, r2
 800562c:	bf28      	it	cs
 800562e:	4613      	movcs	r3, r2
 8005630:	461a      	mov	r2, r3
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f001 f80f 	bl	8006658 <USBD_CtlContinueRx>
 800563a:	e030      	b.n	800569e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b03      	cmp	r3, #3
 8005646:	d10b      	bne.n	8005660 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f001 f80a 	bl	800667a <USBD_CtlSendStatus>
 8005666:	e01a      	b.n	800569e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b03      	cmp	r3, #3
 8005672:	d114      	bne.n	800569e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	7afa      	ldrb	r2, [r7, #11]
 800568a:	4611      	mov	r1, r2
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	4798      	blx	r3
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	e000      	b.n	80056a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	460b      	mov	r3, r1
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d16b      	bne.n	8005794 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3314      	adds	r3, #20
 80056c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d156      	bne.n	800577a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d914      	bls.n	8005702 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	461a      	mov	r2, r3
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 ff84 	bl	80065fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056f4:	2300      	movs	r3, #0
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f001 fc60 	bl	8006fc0 <USBD_LL_PrepareReceive>
 8005700:	e03b      	b.n	800577a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	429a      	cmp	r2, r3
 800570c:	d11c      	bne.n	8005748 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005716:	429a      	cmp	r2, r3
 8005718:	d316      	bcc.n	8005748 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005724:	429a      	cmp	r2, r3
 8005726:	d20f      	bcs.n	8005748 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005728:	2200      	movs	r2, #0
 800572a:	2100      	movs	r1, #0
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 ff65 	bl	80065fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800573a:	2300      	movs	r3, #0
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f001 fc3d 	bl	8006fc0 <USBD_LL_PrepareReceive>
 8005746:	e018      	b.n	800577a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b03      	cmp	r3, #3
 8005752:	d10b      	bne.n	800576c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f001 fb7c 	bl	8006e6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 ff93 	bl	80066a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005780:	2b01      	cmp	r3, #1
 8005782:	d122      	bne.n	80057ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f7ff fe98 	bl	80054ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005792:	e01a      	b.n	80057ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b03      	cmp	r3, #3
 800579e:	d114      	bne.n	80057ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	7afa      	ldrb	r2, [r7, #11]
 80057b6:	4611      	mov	r1, r2
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	4798      	blx	r3
 80057bc:	4603      	mov	r3, r0
 80057be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
 80057c8:	e000      	b.n	80057cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005804:	2303      	movs	r3, #3
 8005806:	e02f      	b.n	8005868 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00f      	beq.n	8005832 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6852      	ldr	r2, [r2, #4]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	4611      	mov	r1, r2
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005832:	2340      	movs	r3, #64	; 0x40
 8005834:	2200      	movs	r2, #0
 8005836:	2100      	movs	r1, #0
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 fad2 	bl	8006de2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800584e:	2340      	movs	r3, #64	; 0x40
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fac4 	bl	8006de2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2240      	movs	r2, #64	; 0x40
 8005864:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d106      	bne.n	80058de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80058fe:	2303      	movs	r3, #3
 8005900:	e012      	b.n	8005928 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b03      	cmp	r3, #3
 800590c:	d10b      	bne.n	8005926 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	e014      	b.n	8005974 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b03      	cmp	r3, #3
 8005954:	d10d      	bne.n	8005972 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	78fa      	ldrb	r2, [r7, #3]
 800596c:	4611      	mov	r1, r2
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005992:	2303      	movs	r3, #3
 8005994:	e014      	b.n	80059c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d10d      	bne.n	80059be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	4611      	mov	r1, r2
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d009      	beq.n	8005a0c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6852      	ldr	r2, [r2, #4]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	4611      	mov	r1, r2
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
  }

  return USBD_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a34:	8a3b      	ldrh	r3, [r7, #16]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	b21a      	sxth	r2, r3
 8005a3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	b21b      	sxth	r3, r3
 8005a42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a44:	89fb      	ldrh	r3, [r7, #14]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d005      	beq.n	8005a7a <USBD_StdDevReq+0x26>
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d853      	bhi.n	8005b1a <USBD_StdDevReq+0xc6>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <USBD_StdDevReq+0x3a>
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d14f      	bne.n	8005b1a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8c:	e04a      	b.n	8005b24 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d83b      	bhi.n	8005b0e <USBD_StdDevReq+0xba>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <USBD_StdDevReq+0x48>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005b05 	.word	0x08005b05
 8005aa4:	08005b0f 	.word	0x08005b0f
 8005aa8:	08005afb 	.word	0x08005afb
 8005aac:	08005b0f 	.word	0x08005b0f
 8005ab0:	08005acf 	.word	0x08005acf
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005b0f 	.word	0x08005b0f
 8005abc:	08005ae7 	.word	0x08005ae7
 8005ac0:	08005ad9 	.word	0x08005ad9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9de 	bl	8005e88 <USBD_GetDescriptor>
          break;
 8005acc:	e024      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fb43 	bl	800615c <USBD_SetAddress>
          break;
 8005ad6:	e01f      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fb82 	bl	80061e4 <USBD_SetConfig>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae4:	e018      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fc21 	bl	8006330 <USBD_GetConfig>
          break;
 8005aee:	e013      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fc52 	bl	800639c <USBD_GetStatus>
          break;
 8005af8:	e00e      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fc81 	bl	8006404 <USBD_SetFeature>
          break;
 8005b02:	e009      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fc90 	bl	800642c <USBD_ClrFeature>
          break;
 8005b0c:	e004      	b.n	8005b18 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fce7 	bl	80064e4 <USBD_CtlError>
          break;
 8005b16:	bf00      	nop
      }
      break;
 8005b18:	e004      	b.n	8005b24 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fce1 	bl	80064e4 <USBD_CtlError>
      break;
 8005b22:	bf00      	nop
  }

  return ret;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop

08005b30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d005      	beq.n	8005b56 <USBD_StdItfReq+0x26>
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d82f      	bhi.n	8005bae <USBD_StdItfReq+0x7e>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <USBD_StdItfReq+0x26>
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d12b      	bne.n	8005bae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d81d      	bhi.n	8005ba0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	889b      	ldrh	r3, [r3, #4]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d813      	bhi.n	8005b96 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	88db      	ldrh	r3, [r3, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <USBD_StdItfReq+0x7a>
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10d      	bne.n	8005baa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fd73 	bl	800667a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005b94:	e009      	b.n	8005baa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fca3 	bl	80064e4 <USBD_CtlError>
          break;
 8005b9e:	e004      	b.n	8005baa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fc9e 	bl	80064e4 <USBD_CtlError>
          break;
 8005ba8:	e000      	b.n	8005bac <USBD_StdItfReq+0x7c>
          break;
 8005baa:	bf00      	nop
      }
      break;
 8005bac:	e004      	b.n	8005bb8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fc97 	bl	80064e4 <USBD_CtlError>
      break;
 8005bb6:	bf00      	nop
  }

  return ret;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	889b      	ldrh	r3, [r3, #4]
 8005bd4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d007      	beq.n	8005bf2 <USBD_StdEPReq+0x30>
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	f200 8145 	bhi.w	8005e72 <USBD_StdEPReq+0x2b0>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00c      	beq.n	8005c06 <USBD_StdEPReq+0x44>
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	f040 8140 	bne.w	8005e72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e13a      	b.n	8005e7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d007      	beq.n	8005c1e <USBD_StdEPReq+0x5c>
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	f300 8129 	bgt.w	8005e66 <USBD_StdEPReq+0x2a4>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d07f      	beq.n	8005d18 <USBD_StdEPReq+0x156>
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d03c      	beq.n	8005c96 <USBD_StdEPReq+0xd4>
 8005c1c:	e123      	b.n	8005e66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d002      	beq.n	8005c30 <USBD_StdEPReq+0x6e>
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d016      	beq.n	8005c5c <USBD_StdEPReq+0x9a>
 8005c2e:	e02c      	b.n	8005c8a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <USBD_StdEPReq+0x90>
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d00a      	beq.n	8005c52 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c3c:	7bbb      	ldrb	r3, [r7, #14]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f001 f913 	bl	8006e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f90f 	bl	8006e6c <USBD_LL_StallEP>
 8005c4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c50:	e020      	b.n	8005c94 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fc45 	bl	80064e4 <USBD_CtlError>
              break;
 8005c5a:	e01b      	b.n	8005c94 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	885b      	ldrh	r3, [r3, #2]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10e      	bne.n	8005c82 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <USBD_StdEPReq+0xc0>
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	2b80      	cmp	r3, #128	; 0x80
 8005c6e:	d008      	beq.n	8005c82 <USBD_StdEPReq+0xc0>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	88db      	ldrh	r3, [r3, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 f8f5 	bl	8006e6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fcf9 	bl	800667a <USBD_CtlSendStatus>

              break;
 8005c88:	e004      	b.n	8005c94 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc29 	bl	80064e4 <USBD_CtlError>
              break;
 8005c92:	bf00      	nop
          }
          break;
 8005c94:	e0ec      	b.n	8005e70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d002      	beq.n	8005ca8 <USBD_StdEPReq+0xe6>
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d016      	beq.n	8005cd4 <USBD_StdEPReq+0x112>
 8005ca6:	e030      	b.n	8005d0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <USBD_StdEPReq+0x108>
 8005cae:	7bbb      	ldrb	r3, [r7, #14]
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d00a      	beq.n	8005cca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cb4:	7bbb      	ldrb	r3, [r7, #14]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 f8d7 	bl	8006e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 f8d3 	bl	8006e6c <USBD_LL_StallEP>
 8005cc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cc8:	e025      	b.n	8005d16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fc09 	bl	80064e4 <USBD_CtlError>
              break;
 8005cd2:	e020      	b.n	8005d16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11b      	bne.n	8005d14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ce6:	7bbb      	ldrb	r3, [r7, #14]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 f8dd 	bl	8006eaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fcc2 	bl	800667a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005d08:	e004      	b.n	8005d14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005d0a:	6839      	ldr	r1, [r7, #0]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fbe9 	bl	80064e4 <USBD_CtlError>
              break;
 8005d12:	e000      	b.n	8005d16 <USBD_StdEPReq+0x154>
              break;
 8005d14:	bf00      	nop
          }
          break;
 8005d16:	e0ab      	b.n	8005e70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d002      	beq.n	8005d2a <USBD_StdEPReq+0x168>
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d032      	beq.n	8005d8e <USBD_StdEPReq+0x1cc>
 8005d28:	e097      	b.n	8005e5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <USBD_StdEPReq+0x17e>
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	2b80      	cmp	r3, #128	; 0x80
 8005d34:	d004      	beq.n	8005d40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fbd3 	bl	80064e4 <USBD_CtlError>
                break;
 8005d3e:	e091      	b.n	8005e64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da0b      	bge.n	8005d60 <USBD_StdEPReq+0x19e>
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	3310      	adds	r3, #16
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	e00b      	b.n	8005d78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d60:	7bbb      	ldrb	r3, [r7, #14]
 8005d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	3304      	adds	r3, #4
 8005d78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2202      	movs	r2, #2
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fc1d 	bl	80065c6 <USBD_CtlSendData>
              break;
 8005d8c:	e06a      	b.n	8005e64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da11      	bge.n	8005dba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d117      	bne.n	8005de0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fb96 	bl	80064e4 <USBD_CtlError>
                  break;
 8005db8:	e054      	b.n	8005e64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb83 	bl	80064e4 <USBD_CtlError>
                  break;
 8005dde:	e041      	b.n	8005e64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da0b      	bge.n	8005e00 <USBD_StdEPReq+0x23e>
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	3310      	adds	r3, #16
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	e00b      	b.n	8005e18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	3304      	adds	r3, #4
 8005e18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <USBD_StdEPReq+0x264>
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d103      	bne.n	8005e2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	e00e      	b.n	8005e4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 f858 	bl	8006ee8 <USBD_LL_IsStallEP>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e002      	b.n	8005e4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fbb7 	bl	80065c6 <USBD_CtlSendData>
              break;
 8005e58:	e004      	b.n	8005e64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fb41 	bl	80064e4 <USBD_CtlError>
              break;
 8005e62:	bf00      	nop
          }
          break;
 8005e64:	e004      	b.n	8005e70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fb3b 	bl	80064e4 <USBD_CtlError>
          break;
 8005e6e:	bf00      	nop
      }
      break;
 8005e70:	e004      	b.n	8005e7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb35 	bl	80064e4 <USBD_CtlError>
      break;
 8005e7a:	bf00      	nop
  }

  return ret;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	885b      	ldrh	r3, [r3, #2]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b06      	cmp	r3, #6
 8005eaa:	f200 8128 	bhi.w	80060fe <USBD_GetDescriptor+0x276>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <USBD_GetDescriptor+0x2c>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ed1 	.word	0x08005ed1
 8005eb8:	08005ee9 	.word	0x08005ee9
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	080060ff 	.word	0x080060ff
 8005ec4:	080060ff 	.word	0x080060ff
 8005ec8:	0800609f 	.word	0x0800609f
 8005ecc:	080060cb 	.word	0x080060cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	7c12      	ldrb	r2, [r2, #16]
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
 8005ee4:	60f8      	str	r0, [r7, #12]
      break;
 8005ee6:	e112      	b.n	800610e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7c1b      	ldrb	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f107 0208 	add.w	r2, r7, #8
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	2202      	movs	r2, #2
 8005f08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f0a:	e100      	b.n	800610e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	f107 0208 	add.w	r2, r7, #8
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
 8005f1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3301      	adds	r3, #1
 8005f22:	2202      	movs	r2, #2
 8005f24:	701a      	strb	r2, [r3, #0]
      break;
 8005f26:	e0f2      	b.n	800610e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	885b      	ldrh	r3, [r3, #2]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b05      	cmp	r3, #5
 8005f30:	f200 80ac 	bhi.w	800608c <USBD_GetDescriptor+0x204>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <USBD_GetDescriptor+0xb4>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f89 	.word	0x08005f89
 8005f44:	08005fbd 	.word	0x08005fbd
 8005f48:	08005ff1 	.word	0x08005ff1
 8005f4c:	08006025 	.word	0x08006025
 8005f50:	08006059 	.word	0x08006059
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	7c12      	ldrb	r2, [r2, #16]
 8005f6c:	f107 0108 	add.w	r1, r7, #8
 8005f70:	4610      	mov	r0, r2
 8005f72:	4798      	blx	r3
 8005f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f76:	e091      	b.n	800609c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fab2 	bl	80064e4 <USBD_CtlError>
            err++;
 8005f80:	7afb      	ldrb	r3, [r7, #11]
 8005f82:	3301      	adds	r3, #1
 8005f84:	72fb      	strb	r3, [r7, #11]
          break;
 8005f86:	e089      	b.n	800609c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00b      	beq.n	8005fac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	7c12      	ldrb	r2, [r2, #16]
 8005fa0:	f107 0108 	add.w	r1, r7, #8
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4798      	blx	r3
 8005fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005faa:	e077      	b.n	800609c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa98 	bl	80064e4 <USBD_CtlError>
            err++;
 8005fb4:	7afb      	ldrb	r3, [r7, #11]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fba:	e06f      	b.n	800609c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	7c12      	ldrb	r2, [r2, #16]
 8005fd4:	f107 0108 	add.w	r1, r7, #8
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
 8005fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fde:	e05d      	b.n	800609c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa7e 	bl	80064e4 <USBD_CtlError>
            err++;
 8005fe8:	7afb      	ldrb	r3, [r7, #11]
 8005fea:	3301      	adds	r3, #1
 8005fec:	72fb      	strb	r3, [r7, #11]
          break;
 8005fee:	e055      	b.n	800609c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	7c12      	ldrb	r2, [r2, #16]
 8006008:	f107 0108 	add.w	r1, r7, #8
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006012:	e043      	b.n	800609c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa64 	bl	80064e4 <USBD_CtlError>
            err++;
 800601c:	7afb      	ldrb	r3, [r7, #11]
 800601e:	3301      	adds	r3, #1
 8006020:	72fb      	strb	r3, [r7, #11]
          break;
 8006022:	e03b      	b.n	800609c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00b      	beq.n	8006048 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	7c12      	ldrb	r2, [r2, #16]
 800603c:	f107 0108 	add.w	r1, r7, #8
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006046:	e029      	b.n	800609c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa4a 	bl	80064e4 <USBD_CtlError>
            err++;
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	3301      	adds	r3, #1
 8006054:	72fb      	strb	r3, [r7, #11]
          break;
 8006056:	e021      	b.n	800609c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	7c12      	ldrb	r2, [r2, #16]
 8006070:	f107 0108 	add.w	r1, r7, #8
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800607a:	e00f      	b.n	800609c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa30 	bl	80064e4 <USBD_CtlError>
            err++;
 8006084:	7afb      	ldrb	r3, [r7, #11]
 8006086:	3301      	adds	r3, #1
 8006088:	72fb      	strb	r3, [r7, #11]
          break;
 800608a:	e007      	b.n	800609c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa28 	bl	80064e4 <USBD_CtlError>
          err++;
 8006094:	7afb      	ldrb	r3, [r7, #11]
 8006096:	3301      	adds	r3, #1
 8006098:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800609a:	bf00      	nop
      }
      break;
 800609c:	e037      	b.n	800610e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7c1b      	ldrb	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	f107 0208 	add.w	r2, r7, #8
 80060b2:	4610      	mov	r0, r2
 80060b4:	4798      	blx	r3
 80060b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060b8:	e029      	b.n	800610e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa11 	bl	80064e4 <USBD_CtlError>
        err++;
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	3301      	adds	r3, #1
 80060c6:	72fb      	strb	r3, [r7, #11]
      break;
 80060c8:	e021      	b.n	800610e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c1b      	ldrb	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	f107 0208 	add.w	r2, r7, #8
 80060de:	4610      	mov	r0, r2
 80060e0:	4798      	blx	r3
 80060e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	2207      	movs	r2, #7
 80060ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060ec:	e00f      	b.n	800610e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9f7 	bl	80064e4 <USBD_CtlError>
        err++;
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	3301      	adds	r3, #1
 80060fa:	72fb      	strb	r3, [r7, #11]
      break;
 80060fc:	e007      	b.n	800610e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9ef 	bl	80064e4 <USBD_CtlError>
      err++;
 8006106:	7afb      	ldrb	r3, [r7, #11]
 8006108:	3301      	adds	r3, #1
 800610a:	72fb      	strb	r3, [r7, #11]
      break;
 800610c:	bf00      	nop
  }

  if (err != 0U)
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11e      	bne.n	8006152 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	88db      	ldrh	r3, [r3, #6]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d016      	beq.n	800614a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800611c:	893b      	ldrh	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	88da      	ldrh	r2, [r3, #6]
 8006126:	893b      	ldrh	r3, [r7, #8]
 8006128:	4293      	cmp	r3, r2
 800612a:	bf28      	it	cs
 800612c:	4613      	movcs	r3, r2
 800612e:	b29b      	uxth	r3, r3
 8006130:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006132:	893b      	ldrh	r3, [r7, #8]
 8006134:	461a      	mov	r2, r3
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa44 	bl	80065c6 <USBD_CtlSendData>
 800613e:	e009      	b.n	8006154 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9ce 	bl	80064e4 <USBD_CtlError>
 8006148:	e004      	b.n	8006154 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa95 	bl	800667a <USBD_CtlSendStatus>
 8006150:	e000      	b.n	8006154 <USBD_GetDescriptor+0x2cc>
    return;
 8006152:	bf00      	nop
  }
}
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d131      	bne.n	80061d2 <USBD_SetAddress+0x76>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	88db      	ldrh	r3, [r3, #6]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d12d      	bne.n	80061d2 <USBD_SetAddress+0x76>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	885b      	ldrh	r3, [r3, #2]
 800617a:	2b7f      	cmp	r3, #127	; 0x7f
 800617c:	d829      	bhi.n	80061d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	885b      	ldrh	r3, [r3, #2]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b03      	cmp	r3, #3
 8006194:	d104      	bne.n	80061a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9a3 	bl	80064e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619e:	e01d      	b.n	80061dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7bfa      	ldrb	r2, [r7, #15]
 80061a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fec7 	bl	8006f40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa61 	bl	800667a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c6:	e009      	b.n	80061dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d0:	e004      	b.n	80061dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f985 	bl	80064e4 <USBD_CtlError>
  }
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	885b      	ldrh	r3, [r3, #2]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	4b4c      	ldr	r3, [pc, #304]	; (800632c <USBD_SetConfig+0x148>)
 80061fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061fc:	4b4b      	ldr	r3, [pc, #300]	; (800632c <USBD_SetConfig+0x148>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d905      	bls.n	8006210 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f96c 	bl	80064e4 <USBD_CtlError>
    return USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	e088      	b.n	8006322 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d002      	beq.n	8006222 <USBD_SetConfig+0x3e>
 800621c:	2b03      	cmp	r3, #3
 800621e:	d025      	beq.n	800626c <USBD_SetConfig+0x88>
 8006220:	e071      	b.n	8006306 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006222:	4b42      	ldr	r3, [pc, #264]	; (800632c <USBD_SetConfig+0x148>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01c      	beq.n	8006264 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800622a:	4b40      	ldr	r3, [pc, #256]	; (800632c <USBD_SetConfig+0x148>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006234:	4b3d      	ldr	r3, [pc, #244]	; (800632c <USBD_SetConfig+0x148>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff f948 	bl	80054d0 <USBD_SetClassConfig>
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f949 	bl	80064e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006252:	e065      	b.n	8006320 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa10 	bl	800667a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2203      	movs	r2, #3
 800625e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006262:	e05d      	b.n	8006320 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa08 	bl	800667a <USBD_CtlSendStatus>
      break;
 800626a:	e059      	b.n	8006320 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800626c:	4b2f      	ldr	r3, [pc, #188]	; (800632c <USBD_SetConfig+0x148>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d112      	bne.n	800629a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <USBD_SetConfig+0x148>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006286:	4b29      	ldr	r3, [pc, #164]	; (800632c <USBD_SetConfig+0x148>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff f93b 	bl	8005508 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f9f1 	bl	800667a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006298:	e042      	b.n	8006320 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <USBD_SetConfig+0x148>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d02a      	beq.n	80062fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff f929 	bl	8005508 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <USBD_SetConfig+0x148>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062c0:	4b1a      	ldr	r3, [pc, #104]	; (800632c <USBD_SetConfig+0x148>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff f902 	bl	80054d0 <USBD_SetClassConfig>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f903 	bl	80064e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff f90e 	bl	8005508 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062f4:	e014      	b.n	8006320 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9bf 	bl	800667a <USBD_CtlSendStatus>
      break;
 80062fc:	e010      	b.n	8006320 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9bb 	bl	800667a <USBD_CtlSendStatus>
      break;
 8006304:	e00c      	b.n	8006320 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8eb 	bl	80064e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <USBD_SetConfig+0x148>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff f8f7 	bl	8005508 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800631a:	2303      	movs	r3, #3
 800631c:	73fb      	strb	r3, [r7, #15]
      break;
 800631e:	bf00      	nop
  }

  return ret;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200001a0 	.word	0x200001a0

08006330 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	88db      	ldrh	r3, [r3, #6]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d004      	beq.n	800634c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f8cd 	bl	80064e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800634a:	e023      	b.n	8006394 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	dc02      	bgt.n	800635e <USBD_GetConfig+0x2e>
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc03      	bgt.n	8006364 <USBD_GetConfig+0x34>
 800635c:	e015      	b.n	800638a <USBD_GetConfig+0x5a>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d00b      	beq.n	800637a <USBD_GetConfig+0x4a>
 8006362:	e012      	b.n	800638a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3308      	adds	r3, #8
 800636e:	2201      	movs	r2, #1
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f927 	bl	80065c6 <USBD_CtlSendData>
        break;
 8006378:	e00c      	b.n	8006394 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	2201      	movs	r2, #1
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f91f 	bl	80065c6 <USBD_CtlSendData>
        break;
 8006388:	e004      	b.n	8006394 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8a9 	bl	80064e4 <USBD_CtlError>
        break;
 8006392:	bf00      	nop
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d81e      	bhi.n	80063f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	88db      	ldrh	r3, [r3, #6]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d004      	beq.n	80063c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f890 	bl	80064e4 <USBD_CtlError>
        break;
 80063c4:	e01a      	b.n	80063fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f043 0202 	orr.w	r2, r3, #2
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	330c      	adds	r3, #12
 80063e6:	2202      	movs	r2, #2
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8eb 	bl	80065c6 <USBD_CtlSendData>
      break;
 80063f0:	e004      	b.n	80063fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f875 	bl	80064e4 <USBD_CtlError>
      break;
 80063fa:	bf00      	nop
  }
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d106      	bne.n	8006424 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f92b 	bl	800667a <USBD_CtlSendStatus>
  }
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800643c:	b2db      	uxtb	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	2b02      	cmp	r3, #2
 8006442:	d80b      	bhi.n	800645c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	885b      	ldrh	r3, [r3, #2]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d10c      	bne.n	8006466 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f910 	bl	800667a <USBD_CtlSendStatus>
      }
      break;
 800645a:	e004      	b.n	8006466 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f840 	bl	80064e4 <USBD_CtlError>
      break;
 8006464:	e000      	b.n	8006468 <USBD_ClrFeature+0x3c>
      break;
 8006466:	bf00      	nop
  }
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fabb 	bl	8005a16 <SWAPBYTE>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3301      	adds	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff faae 	bl	8005a16 <SWAPBYTE>
 80064ba:	4603      	mov	r3, r0
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff faa1 	bl	8005a16 <SWAPBYTE>
 80064d4:	4603      	mov	r3, r0
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	80da      	strh	r2, [r3, #6]
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ee:	2180      	movs	r1, #128	; 0x80
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcbb 	bl	8006e6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064f6:	2100      	movs	r1, #0
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fcb7 	bl	8006e6c <USBD_LL_StallEP>
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d036      	beq.n	800658a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006520:	6938      	ldr	r0, [r7, #16]
 8006522:	f000 f836 	bl	8006592 <USBD_GetLen>
 8006526:	4603      	mov	r3, r0
 8006528:	3301      	adds	r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4413      	add	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	3301      	adds	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	4413      	add	r3, r2
 800654c:	2203      	movs	r2, #3
 800654e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	3301      	adds	r3, #1
 8006554:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006556:	e013      	b.n	8006580 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4413      	add	r3, r2
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	3301      	adds	r3, #1
 8006568:	613b      	str	r3, [r7, #16]
    idx++;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	3301      	adds	r3, #1
 800656e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4413      	add	r3, r2
 8006576:	2200      	movs	r2, #0
 8006578:	701a      	strb	r2, [r3, #0]
    idx++;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	3301      	adds	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e7      	bne.n	8006558 <USBD_GetString+0x52>
 8006588:	e000      	b.n	800658c <USBD_GetString+0x86>
    return;
 800658a:	bf00      	nop
  }
}
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80065a2:	e005      	b.n	80065b0 <USBD_GetLen+0x1e>
  {
    len++;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	3301      	adds	r3, #1
 80065a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f5      	bne.n	80065a4 <USBD_GetLen+0x12>
  }

  return len;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	2100      	movs	r1, #0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fcc6 	bl	8006f7e <USBD_LL_Transmit>

  return USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	2100      	movs	r1, #0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fcb5 	bl	8006f7e <USBD_LL_Transmit>

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2203      	movs	r2, #3
 800662e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	2100      	movs	r1, #0
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fcb9 	bl	8006fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	2100      	movs	r1, #0
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fca8 	bl	8006fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800668a:	2300      	movs	r3, #0
 800668c:	2200      	movs	r2, #0
 800668e:	2100      	movs	r1, #0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc74 	bl	8006f7e <USBD_LL_Transmit>

  return USBD_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2205      	movs	r2, #5
 80066ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b0:	2300      	movs	r3, #0
 80066b2:	2200      	movs	r2, #0
 80066b4:	2100      	movs	r1, #0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fc82 	bl	8006fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066cc:	2200      	movs	r2, #0
 80066ce:	4912      	ldr	r1, [pc, #72]	; (8006718 <MX_USB_DEVICE_Init+0x50>)
 80066d0:	4812      	ldr	r0, [pc, #72]	; (800671c <MX_USB_DEVICE_Init+0x54>)
 80066d2:	f7fe fe8f 	bl	80053f4 <USBD_Init>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066dc:	f7fa f8ea 	bl	80008b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066e0:	490f      	ldr	r1, [pc, #60]	; (8006720 <MX_USB_DEVICE_Init+0x58>)
 80066e2:	480e      	ldr	r0, [pc, #56]	; (800671c <MX_USB_DEVICE_Init+0x54>)
 80066e4:	f7fe feb6 	bl	8005454 <USBD_RegisterClass>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066ee:	f7fa f8e1 	bl	80008b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066f2:	490c      	ldr	r1, [pc, #48]	; (8006724 <MX_USB_DEVICE_Init+0x5c>)
 80066f4:	4809      	ldr	r0, [pc, #36]	; (800671c <MX_USB_DEVICE_Init+0x54>)
 80066f6:	f7fe fe07 	bl	8005308 <USBD_CDC_RegisterInterface>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006700:	f7fa f8d8 	bl	80008b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006704:	4805      	ldr	r0, [pc, #20]	; (800671c <MX_USB_DEVICE_Init+0x54>)
 8006706:	f7fe fecc 	bl	80054a2 <USBD_Start>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006710:	f7fa f8d0 	bl	80008b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006714:	bf00      	nop
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000130 	.word	0x20000130
 800671c:	20000460 	.word	0x20000460
 8006720:	20000018 	.word	0x20000018
 8006724:	2000011c 	.word	0x2000011c

08006728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800672c:	2200      	movs	r2, #0
 800672e:	4905      	ldr	r1, [pc, #20]	; (8006744 <CDC_Init_FS+0x1c>)
 8006730:	4805      	ldr	r0, [pc, #20]	; (8006748 <CDC_Init_FS+0x20>)
 8006732:	f7fe fdfe 	bl	8005332 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006736:	4905      	ldr	r1, [pc, #20]	; (800674c <CDC_Init_FS+0x24>)
 8006738:	4803      	ldr	r0, [pc, #12]	; (8006748 <CDC_Init_FS+0x20>)
 800673a:	f7fe fe18 	bl	800536e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800673e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000f30 	.word	0x20000f30
 8006748:	20000460 	.word	0x20000460
 800674c:	20000730 	.word	0x20000730

08006750 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006754:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006756:	4618      	mov	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
 800676c:	4613      	mov	r3, r2
 800676e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b23      	cmp	r3, #35	; 0x23
 8006774:	d84a      	bhi.n	800680c <CDC_Control_FS+0xac>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <CDC_Control_FS+0x1c>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	0800680d 	.word	0x0800680d
 8006780:	0800680d 	.word	0x0800680d
 8006784:	0800680d 	.word	0x0800680d
 8006788:	0800680d 	.word	0x0800680d
 800678c:	0800680d 	.word	0x0800680d
 8006790:	0800680d 	.word	0x0800680d
 8006794:	0800680d 	.word	0x0800680d
 8006798:	0800680d 	.word	0x0800680d
 800679c:	0800680d 	.word	0x0800680d
 80067a0:	0800680d 	.word	0x0800680d
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	0800680d 	.word	0x0800680d
 80067ac:	0800680d 	.word	0x0800680d
 80067b0:	0800680d 	.word	0x0800680d
 80067b4:	0800680d 	.word	0x0800680d
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	0800680d 	.word	0x0800680d
 80067c0:	0800680d 	.word	0x0800680d
 80067c4:	0800680d 	.word	0x0800680d
 80067c8:	0800680d 	.word	0x0800680d
 80067cc:	0800680d 	.word	0x0800680d
 80067d0:	0800680d 	.word	0x0800680d
 80067d4:	0800680d 	.word	0x0800680d
 80067d8:	0800680d 	.word	0x0800680d
 80067dc:	0800680d 	.word	0x0800680d
 80067e0:	0800680d 	.word	0x0800680d
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	0800680d 	.word	0x0800680d
 80067f8:	0800680d 	.word	0x0800680d
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	0800680d 	.word	0x0800680d
 8006804:	0800680d 	.word	0x0800680d
 8006808:	0800680d 	.word	0x0800680d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800680c:	bf00      	nop
  }

  return (USBD_OK);
 800680e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006810:	4618      	mov	r0, r3
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4805      	ldr	r0, [pc, #20]	; (8006840 <CDC_Receive_FS+0x24>)
 800682a:	f7fe fda0 	bl	800536e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800682e:	4804      	ldr	r0, [pc, #16]	; (8006840 <CDC_Receive_FS+0x24>)
 8006830:	f7fe fdb6 	bl	80053a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006834:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000460 	.word	0x20000460

08006844 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800685a:	4618      	mov	r0, r3
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	6039      	str	r1, [r7, #0]
 8006872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2212      	movs	r2, #18
 8006878:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800687a:	4b03      	ldr	r3, [pc, #12]	; (8006888 <USBD_FS_DeviceDescriptor+0x20>)
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	2000014c 	.word	0x2000014c

0800688c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	6039      	str	r1, [r7, #0]
 8006896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2204      	movs	r2, #4
 800689c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800689e:	4b03      	ldr	r3, [pc, #12]	; (80068ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000160 	.word	0x20000160

080068b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	4907      	ldr	r1, [pc, #28]	; (80068e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80068c6:	4808      	ldr	r0, [pc, #32]	; (80068e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80068c8:	f7ff fe1d 	bl	8006506 <USBD_GetString>
 80068cc:	e004      	b.n	80068d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	4904      	ldr	r1, [pc, #16]	; (80068e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80068d2:	4805      	ldr	r0, [pc, #20]	; (80068e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80068d4:	f7ff fe17 	bl	8006506 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068d8:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001730 	.word	0x20001730
 80068e8:	08007120 	.word	0x08007120

080068ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	6039      	str	r1, [r7, #0]
 80068f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	4904      	ldr	r1, [pc, #16]	; (800690c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068fc:	4804      	ldr	r0, [pc, #16]	; (8006910 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068fe:	f7ff fe02 	bl	8006506 <USBD_GetString>
  return USBD_StrDesc;
 8006902:	4b02      	ldr	r3, [pc, #8]	; (800690c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20001730 	.word	0x20001730
 8006910:	08007138 	.word	0x08007138

08006914 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	221a      	movs	r2, #26
 8006924:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006926:	f000 f843 	bl	80069b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800692a:	4b02      	ldr	r3, [pc, #8]	; (8006934 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000164 	.word	0x20000164

08006938 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	6039      	str	r1, [r7, #0]
 8006942:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4907      	ldr	r1, [pc, #28]	; (800696c <USBD_FS_ConfigStrDescriptor+0x34>)
 800694e:	4808      	ldr	r0, [pc, #32]	; (8006970 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006950:	f7ff fdd9 	bl	8006506 <USBD_GetString>
 8006954:	e004      	b.n	8006960 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	4904      	ldr	r1, [pc, #16]	; (800696c <USBD_FS_ConfigStrDescriptor+0x34>)
 800695a:	4805      	ldr	r0, [pc, #20]	; (8006970 <USBD_FS_ConfigStrDescriptor+0x38>)
 800695c:	f7ff fdd3 	bl	8006506 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20001730 	.word	0x20001730
 8006970:	0800714c 	.word	0x0800714c

08006974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	4907      	ldr	r1, [pc, #28]	; (80069a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800698a:	4808      	ldr	r0, [pc, #32]	; (80069ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800698c:	f7ff fdbb 	bl	8006506 <USBD_GetString>
 8006990:	e004      	b.n	800699c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4904      	ldr	r1, [pc, #16]	; (80069a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006996:	4805      	ldr	r0, [pc, #20]	; (80069ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006998:	f7ff fdb5 	bl	8006506 <USBD_GetString>
  }
  return USBD_StrDesc;
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20001730 	.word	0x20001730
 80069ac:	08007158 	.word	0x08007158

080069b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <Get_SerialNum+0x44>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <Get_SerialNum+0x48>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069c2:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <Get_SerialNum+0x4c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4413      	add	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069d6:	2208      	movs	r2, #8
 80069d8:	4909      	ldr	r1, [pc, #36]	; (8006a00 <Get_SerialNum+0x50>)
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 f814 	bl	8006a08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069e0:	2204      	movs	r2, #4
 80069e2:	4908      	ldr	r1, [pc, #32]	; (8006a04 <Get_SerialNum+0x54>)
 80069e4:	68b8      	ldr	r0, [r7, #8]
 80069e6:	f000 f80f 	bl	8006a08 <IntToUnicode>
  }
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	1fff7a10 	.word	0x1fff7a10
 80069f8:	1fff7a14 	.word	0x1fff7a14
 80069fc:	1fff7a18 	.word	0x1fff7a18
 8006a00:	20000166 	.word	0x20000166
 8006a04:	20000176 	.word	0x20000176

08006a08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]
 8006a1e:	e027      	b.n	8006a70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0f1b      	lsrs	r3, r3, #28
 8006a24:	2b09      	cmp	r3, #9
 8006a26:	d80b      	bhi.n	8006a40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	0f1b      	lsrs	r3, r3, #28
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4619      	mov	r1, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	440b      	add	r3, r1
 8006a38:	3230      	adds	r2, #48	; 0x30
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	e00a      	b.n	8006a56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	0f1b      	lsrs	r3, r3, #28
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	440b      	add	r3, r1
 8006a50:	3237      	adds	r2, #55	; 0x37
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	3301      	adds	r3, #1
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	4413      	add	r3, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
 8006a70:	7dfa      	ldrb	r2, [r7, #23]
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d3d3      	bcc.n	8006a20 <IntToUnicode+0x18>
  }
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a90:	f107 0314 	add.w	r3, r7, #20
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
 8006a9c:	60da      	str	r2, [r3, #12]
 8006a9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aa8:	d13a      	bne.n	8006b20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	4b1e      	ldr	r3, [pc, #120]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006acc:	2302      	movs	r3, #2
 8006ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ad8:	230a      	movs	r3, #10
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006adc:	f107 0314 	add.w	r3, r7, #20
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4812      	ldr	r0, [pc, #72]	; (8006b2c <HAL_PCD_MspInit+0xa4>)
 8006ae4:	f7fa faa4 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aec:	4a0e      	ldr	r2, [pc, #56]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	6353      	str	r3, [r2, #52]	; 0x34
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b02:	6453      	str	r3, [r2, #68]	; 0x44
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <HAL_PCD_MspInit+0xa0>)
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b10:	2200      	movs	r2, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	2043      	movs	r0, #67	; 0x43
 8006b16:	f7fa fa54 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b1a:	2043      	movs	r0, #67	; 0x43
 8006b1c:	f7fa fa6d 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b20:	bf00      	nop
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40020000 	.word	0x40020000

08006b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b44:	4619      	mov	r1, r3
 8006b46:	4610      	mov	r0, r2
 8006b48:	f7fe fcf6 	bl	8005538 <USBD_LL_SetupStage>
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f7fe fd30 	bl	80055e2 <USBD_LL_DataOutStage>
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	3348      	adds	r3, #72	; 0x48
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f7fe fd79 	bl	80056a8 <USBD_LL_DataInStage>
}
 8006bb6:	bf00      	nop
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fe8d 	bl	80058ec <USBD_LL_SOF>
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006be2:	2301      	movs	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
 8006bf2:	e008      	b.n	8006c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d102      	bne.n	8006c02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]
 8006c00:	e001      	b.n	8006c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c02:	f7f9 fe57 	bl	80008b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c0c:	7bfa      	ldrb	r2, [r7, #15]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fe2d 	bl	8005870 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe fdd9 	bl	80057d4 <USBD_LL_Reset>
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fe28 	bl	8005890 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_PCD_SuspendCallback+0x48>)
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <HAL_PCD_SuspendCallback+0x48>)
 8006c66:	f043 0306 	orr.w	r3, r3, #6
 8006c6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	e000ed00 	.word	0xe000ed00

08006c78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fe18 	bl	80058bc <USBD_LL_Resume>
}
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fe66 	bl	800597c <USBD_LL_IsoOUTIncomplete>
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fe2e 	bl	8005930 <USBD_LL_IsoINIncomplete>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fe6c 	bl	80059c8 <USBD_LL_DevConnected>
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fe69 	bl	80059de <USBD_LL_DevDisconnected>
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d13c      	bne.n	8006d9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d24:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d34:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d3c:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d3e:	2204      	movs	r2, #4
 8006d40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d42:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d44:	2202      	movs	r2, #2
 8006d46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d48:	4b17      	ldr	r3, [pc, #92]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d4e:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d50:	2202      	movs	r2, #2
 8006d52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d54:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d6c:	4b0e      	ldr	r3, [pc, #56]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d72:	480d      	ldr	r0, [pc, #52]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d74:	f7fa fb11 	bl	800139a <HAL_PCD_Init>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d7e:	f7f9 fd99 	bl	80008b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d82:	2180      	movs	r1, #128	; 0x80
 8006d84:	4808      	ldr	r0, [pc, #32]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d86:	f7fb fc6e 	bl	8002666 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d8a:	2240      	movs	r2, #64	; 0x40
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4806      	ldr	r0, [pc, #24]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d90:	f7fb fc22 	bl	80025d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d94:	2280      	movs	r2, #128	; 0x80
 8006d96:	2101      	movs	r1, #1
 8006d98:	4803      	ldr	r0, [pc, #12]	; (8006da8 <USBD_LL_Init+0x94>)
 8006d9a:	f7fb fc1d 	bl	80025d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20001930 	.word	0x20001930

08006dac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fa fc06 	bl	80015d4 <HAL_PCD_Start>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f942 	bl	8007058 <USBD_Get_USB_Status>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	461a      	mov	r2, r3
 8006df0:	4603      	mov	r3, r0
 8006df2:	70fb      	strb	r3, [r7, #3]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70bb      	strb	r3, [r7, #2]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e0a:	78bb      	ldrb	r3, [r7, #2]
 8006e0c:	883a      	ldrh	r2, [r7, #0]
 8006e0e:	78f9      	ldrb	r1, [r7, #3]
 8006e10:	f7fa ffea 	bl	8001de8 <HAL_PCD_EP_Open>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f91c 	bl	8007058 <USBD_Get_USB_Status>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fb f833 	bl	8001eb8 <HAL_PCD_EP_Close>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f8fd 	bl	8007058 <USBD_Get_USB_Status>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fb f90b 	bl	80020a6 <HAL_PCD_EP_SetStall>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f8de 	bl	8007058 <USBD_Get_USB_Status>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fb f950 	bl	800216e <HAL_PCD_EP_ClrStall>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f8bf 	bl	8007058 <USBD_Get_USB_Status>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006efa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da0b      	bge.n	8006f1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	333e      	adds	r3, #62	; 0x3e
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	e00b      	b.n	8006f34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f22:	68f9      	ldr	r1, [r7, #12]
 8006f24:	4613      	mov	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fa ff1d 	bl	8001d9e <HAL_PCD_SetAddress>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f874 	bl	8007058 <USBD_Get_USB_Status>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f9c:	7af9      	ldrb	r1, [r7, #11]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	f7fb f836 	bl	8002012 <HAL_PCD_EP_Transmit>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 f853 	bl	8007058 <USBD_Get_USB_Status>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fde:	7af9      	ldrb	r1, [r7, #11]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	f7fa ffb2 	bl	8001f4c <HAL_PCD_EP_Receive>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f832 	bl	8007058 <USBD_Get_USB_Status>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ff8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7fa ffe2 	bl	8001fe2 <HAL_PCD_EP_GetRxCount>
 800701e:	4603      	mov	r3, r0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_static_malloc+0x18>)
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	200001a4 	.word	0x200001a4

08007044 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d817      	bhi.n	800709c <USBD_Get_USB_Status+0x44>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <USBD_Get_USB_Status+0x1c>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007085 	.word	0x08007085
 8007078:	0800708b 	.word	0x0800708b
 800707c:	08007091 	.word	0x08007091
 8007080:	08007097 	.word	0x08007097
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
    break;
 8007088:	e00b      	b.n	80070a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800708a:	2303      	movs	r3, #3
 800708c:	73fb      	strb	r3, [r7, #15]
    break;
 800708e:	e008      	b.n	80070a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
    break;
 8007094:	e005      	b.n	80070a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	73fb      	strb	r3, [r7, #15]
    break;
 800709a:	e002      	b.n	80070a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800709c:	2303      	movs	r3, #3
 800709e:	73fb      	strb	r3, [r7, #15]
    break;
 80070a0:	bf00      	nop
  }
  return usb_status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <__libc_init_array>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4d0d      	ldr	r5, [pc, #52]	; (80070e8 <__libc_init_array+0x38>)
 80070b4:	4c0d      	ldr	r4, [pc, #52]	; (80070ec <__libc_init_array+0x3c>)
 80070b6:	1b64      	subs	r4, r4, r5
 80070b8:	10a4      	asrs	r4, r4, #2
 80070ba:	2600      	movs	r6, #0
 80070bc:	42a6      	cmp	r6, r4
 80070be:	d109      	bne.n	80070d4 <__libc_init_array+0x24>
 80070c0:	4d0b      	ldr	r5, [pc, #44]	; (80070f0 <__libc_init_array+0x40>)
 80070c2:	4c0c      	ldr	r4, [pc, #48]	; (80070f4 <__libc_init_array+0x44>)
 80070c4:	f000 f820 	bl	8007108 <_init>
 80070c8:	1b64      	subs	r4, r4, r5
 80070ca:	10a4      	asrs	r4, r4, #2
 80070cc:	2600      	movs	r6, #0
 80070ce:	42a6      	cmp	r6, r4
 80070d0:	d105      	bne.n	80070de <__libc_init_array+0x2e>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d8:	4798      	blx	r3
 80070da:	3601      	adds	r6, #1
 80070dc:	e7ee      	b.n	80070bc <__libc_init_array+0xc>
 80070de:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e2:	4798      	blx	r3
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7f2      	b.n	80070ce <__libc_init_array+0x1e>
 80070e8:	08007180 	.word	0x08007180
 80070ec:	08007180 	.word	0x08007180
 80070f0:	08007180 	.word	0x08007180
 80070f4:	08007184 	.word	0x08007184

080070f8 <memset>:
 80070f8:	4402      	add	r2, r0
 80070fa:	4603      	mov	r3, r0
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d100      	bne.n	8007102 <memset+0xa>
 8007100:	4770      	bx	lr
 8007102:	f803 1b01 	strb.w	r1, [r3], #1
 8007106:	e7f9      	b.n	80070fc <memset+0x4>

08007108 <_init>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr

08007114 <_fini>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr
